<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Visopsys &#126; Memory Management</title>
    <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=iso-8859-1" />
    <link rel="stylesheet" href="blade_packs/system_razorSiteSearch/css/sitesearch.css" type="text/css" media="screen" />    <link rel="stylesheet" type="text/css" href="blade_packs/theme_ClearBlue/ClearBlue_css.css" />
    <!-- WIN IE Style Sheets -->
<!--[if IE]>
  <![if gte IE 5.5]>
   <![if gte IE 7]><link rel="stylesheet" 
	type="text/css" media="screen,projection" 
	href="ie.css" />
	<![endif]>
   <![if lt IE 7]><link rel="stylesheet" 
	type="text/css" media="screen,projection" 
	href="ie.css" />
	<![endif]>
  <![endif]>
  <![if lt IE 5.5]>
   <link rel="stylesheet"
	type="text/css" media="screen,projection" 
	href="ie.css" />
    <![endif]>
<![endif]-->
        <link rel="shortcut icon" href="favicon.ico" />
</head>
<body>
<div id="wrap">
  <div id="wrap2">
    <div id="header">

<h1 id="logo"><img src="visopsys-logo1.png" width="300px" height="85px" /></h1>

      <!--<h1 id="logo">Visopsys</h1>
            <div id="slogan">Visual Operating System</div>-->

	    <div id='searchBoxHeader'><div><form action='http://visopsys.org/razor-SiteSearch.htm' method='post'><input class='searchText' type='text' name='siteSearch' /><input class='searchButton' type='submit' value='Search' /></form></div></div>    </div>
    <div id="nav">
      <div id="nbar">
            <ul class="first"><li><a href='index.html'>Home</a></li><li><a href='about.htm'>About</a></li><li><a href='news.htm'>News</a></li><li><a href='screenshots.htm'>Screenshots</a></li><li><a href='downloads.htm'>Downloads</a></li><li><a href='forums/index.php'>Forum</a></li><li><a href='developers.htm'>Developers</a></li><li><a href='os-dev.htm'>OS Dev</a></li></ul>	             </div>
    </div>
    <div id="content-wrap">
      <div id="sidebar">
      <div id="right_sidebar">
          <div id="side_sky_ad">
          	<!-- Sidebar Sky Scraper Ad -->
            <!-- 160 x 600 Google ad code -->
                                <script type="text/javascript"><!--
					google_ad_client = "ca-pub-2784580927617241";
					/* orig */
					google_ad_slot = "8342665437";
					google_ad_width = 160;
					google_ad_height = 600;
					//-->
				  </script>
				  <script type="text/javascript"
					src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
				  </script>
          </div>
        </div>
      <!--<div id="left_sidebar">
                                Edit this sidebar with the Filemanager in<br/>
root/blade_packs/ theme_ClearBlue/ ClearBlue_xhtml.php
          </div>-->
      </div>
      <div id="content">
                <p align="left" style="color: rgb(0, 0, 0); font-family: arial; font-size: medium;">
	<b><font size="4">About Visopsys</font></b></p>
<div align="center" style="color: rgb(0, 0, 0); font-family: arial; font-size: medium;">
	<center>
		<table border="0" bordercolor="#111111" cellpadding="0" cellspacing="0" style="border-collapse: collapse;" width="100%">
			<tbody>
				<tr>
					<td>
						VISOPSYS&#39; MEMORY MANAGER
						<p>
							Visopsys contains a memory manager that is capable of controlling basically arbitrary quantities of RAM memory.&nbsp; Suffice to say that your PC hardware is not capable of supporting more memory than Visopsys can handle.</p>
						<p>
							The quantity of memory in your system is determined at boot time by Visopsys&#39; Operating System Loader.&nbsp; The amount of memory detected is then passed to the kernel at startup.&nbsp; This is the &quot;safest&quot; way to detect your memory --&nbsp;<a href="memory-management.htm#alt-memory-detect">there are other possible methods*</a>, but the consensus among hardware programmers is that asking the 16- bit system BIOS (before the 32-bit Visopsys kernel is invoked) is the most appropriate technique.&nbsp;</p>
						<p>
							In Visopsys, memory is organized as a 32-bit flat memory space.&nbsp; From the application program&#39;s point of view, memory is arranged as one large space which starts at address 0 and continues uninterrupted all the way to the end.&nbsp; All of this means that Visopsys does not use the x86&#39;s famously complicated segmented memory scheme. &nbsp; While segmented memory is easy to &quot;protect&quot; (i.e. to protect applications from interfering with memory that doesn&#39;t belong to them), it introduces unnecessary complication.&nbsp; In Visopsys, memory protection is achieved via the &quot;paging&quot; or &quot;virtual memory&quot; mechanism.&nbsp; An application may only access memory pages that belong to it.</p>
						<p>
							&quot;Real&quot; or &quot;linear&quot; (as opposed to paged or virtual) memory is allocated in 4 kilobyte pages.&nbsp; Thus, any allocation of memory can be no smaller than 4Kb, and can theoretically be as large as the maximum number supported by the 32- bit x86 CPU -- 4 gigabytes.&nbsp;</p>
						<p>
							This 4Kb minimum allocation was chosen for a couple of reasons: &nbsp; not coincidentally, it corresponds with the size of a virtual memory page in the x86.&nbsp; Also, 4Kb is relatively small compared to the large quantities of memory shipped with most modern PCs.&nbsp; Any potential wastage as a result of multiple small memory allocation requests is kept reasonably low in relation to the available memory in most systems.&nbsp; Computer Science theory tells us that on average, for each memory allocation request, &frac12; of the minimum block size (2 Kb) will go unused.&nbsp; Generally speaking, good &quot;heap&quot; memory management will reduce the number of small allocation requests;&nbsp; instead, one larger allocation is performed by the application libraries and pieces of that memory are parceled out when necessary.</p>
						<p>
							Shortly, I will be documenting the Visopsys kernel&#39;s external interface to the memory management routines, for use by libraries and application programs.&nbsp; In its current form, it is only available for internal use by the kernel itself.<br />
							&nbsp;</p>
						<p>
							<a name="alt-memory-detect"></a><font size="2">* The original IBM PC couldn&#39;t support even a single megabyte of RAM.&nbsp; Even today, detecting memory beyond 64 megabytes is slightly tricky.&nbsp; A technique exists to test the presence memory whereby the programmer attempts to use memory in increasing increments -- at the point where such an attempt fails, the programmer assumes that no real memory exists beyond that point. &nbsp; This is not generally considered a &quot;safe&quot; technique.</font></p>
					</td>
				</tr>
			</tbody>
		</table>
	</center>
</div>
                      </div>
      </div>
    
    <div class="clearfix"></div>
    <div id="footer">                 
                                <small><br/>Copyright &copy; 1999-2014 J. Andrew McLaughlin<br/>Visopsys and Visopsys.org are trademarks of J. Andrew McLaughlin.<br/><a href="mailto:andy@visopsys.org">Contact</a> | Design by <a href="http://www.fosforito.net/">Jens L. Wagner</a><br/><br/></small>                  </div>
  <!-- End Wrap2 -->
</div>
<!-- End Wrap -->
</body>
</html>