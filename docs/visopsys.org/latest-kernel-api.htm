<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Visopsys &#126; Kernel API</title>
    <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=iso-8859-1" />
    <link rel="stylesheet" href="blade_packs/system_razorSiteSearch/css/sitesearch.css" type="text/css" media="screen" />    <link rel="stylesheet" type="text/css" href="blade_packs/theme_ClearBlue/ClearBlue_css.css" />
    <!-- WIN IE Style Sheets -->
<!--[if IE]>
  <![if gte IE 5.5]>
   <![if gte IE 7]><link rel="stylesheet" 
	type="text/css" media="screen,projection" 
	href="ie.css" />
	<![endif]>
   <![if lt IE 7]><link rel="stylesheet" 
	type="text/css" media="screen,projection" 
	href="ie.css" />
	<![endif]>
  <![endif]>
  <![if lt IE 5.5]>
   <link rel="stylesheet"
	type="text/css" media="screen,projection" 
	href="ie.css" />
    <![endif]>
<![endif]-->
        <link rel="shortcut icon" href="favicon.ico" />
</head>
<body>
<div id="wrap">
  <div id="wrap2">
    <div id="header">

<h1 id="logo"><img src="visopsys-logo1.png" width="300px" height="85px" /></h1>

      <!--<h1 id="logo">Visopsys</h1>
            <div id="slogan">Visual Operating System</div>-->

	    <div id='searchBoxHeader'><div><form action='http://visopsys.org/razor-SiteSearch.htm' method='post'><input class='searchText' type='text' name='siteSearch' /><input class='searchButton' type='submit' value='Search' /></form></div></div>    </div>
    <div id="nav">
      <div id="nbar">
            <ul class="first"><li><a href='index.html'>Home</a></li><li><a href='about.htm'>About</a></li><li><a href='news.htm'>News</a></li><li><a href='screenshots.htm'>Screenshots</a></li><li><a href='downloads.htm'>Downloads</a></li><li><a href='forums/index.php'>Forum</a></li><li><a href='developers.htm'>Developers</a></li><li><a href='os-dev.htm'>OS Dev</a></li></ul>	             </div>
    </div>
    <div id="content-wrap">
      <div id="sidebar">
      <div id="right_sidebar">
          <div id="side_sky_ad">
          	<!-- Sidebar Sky Scraper Ad -->
            <!-- 160 x 600 Google ad code -->
                                <script type="text/javascript"><!--
					google_ad_client = "ca-pub-2784580927617241";
					/* orig */
					google_ad_slot = "8342665437";
					google_ad_width = 160;
					google_ad_height = 600;
					//-->
				  </script>
				  <script type="text/javascript"
					src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
				  </script>
          </div>
        </div>
      <!--<div id="left_sidebar">
                                Edit this sidebar with the Filemanager in<br/>
root/blade_packs/ theme_ClearBlue/ ClearBlue_xhtml.php
          </div>-->
      </div>
      <div id="content">
                <p align="left" style="color: rgb(0, 0, 0); font-family: arial; font-size: medium;">
	<b><font face="Arial" size="4">Developers</font></b></p>
<div align="center" style="color: rgb(0, 0, 0); font-family: arial; font-size: medium;">
	<center>
		<table border="0" bordercolor="#111111" cellpadding="0" cellspacing="0" style="border-collapse: collapse;" width="100%">
			<tbody>
				<tr>
					<td>
						<b>THE VISOPSYS KERNEL API (Version 0.7)</b><br />
						<p>
							All of the kernel&#39;s functions are defined in the file /system/headers/sys/api.h. In future, this file may be split into smaller chunks, by functional area. Data structures referred to in these function definitions are found in header files in the /system/headers/sys directory. For example, a &#39;disk&#39; object is defined in /system/headers/sys/disk.h.</p>
						<blockquote>
							<p>
								<i>One note on the &#39;objectKey&#39; type used by many of these functions: This is used to refer to data structures in kernel memory that are not accessible (in a practical sense) to external programs. Users of the kernel API should treat these as opaque reference handles.</i></p>
						</blockquote>
						<p>
							Here is the breakdown of functions divided by functional area:</p>
						<p>
							<a href="latest-kernel-api.htm#text">Text input/output functions</a><br />
							<a href="latest-kernel-api.htm#disk">Disk functions</a><br />
							<a href="latest-kernel-api.htm#filesystem">Filesystem functions</a><br />
							<a href="latest-kernel-api.htm#file">File functions</a><br />
							<a href="latest-kernel-api.htm#memory">Memory functions</a><br />
							<a href="latest-kernel-api.htm#multitasker">Multitasker functions</a><br />
							<a href="latest-kernel-api.htm#loader">Loader functions</a><br />
							<a href="latest-kernel-api.htm#rtc">Real-time clock functions</a><br />
							<a href="latest-kernel-api.htm#random">Random number functions</a><br />
							<a href="latest-kernel-api.htm#environment">Environment functions</a><br />
							<a href="latest-kernel-api.htm#graphics">Raw graphics functions</a><br />
							<a href="latest-kernel-api.htm#window">Window system functions</a><br />
							<a href="latest-kernel-api.htm#user">User functions</a><br />
							<a href="latest-kernel-api.htm#network">Network functions</a><br />
							<a href="latest-kernel-api.htm#miscellaneous">Miscellaneous functions</a></p>
						<p>
							&nbsp;</p>
						<p>
							<b><a name="text"></a>Text input/output functions</b></p>
						<p>
							&nbsp;</p>
						<p>
							<font face="Courier New">objectKey textGetConsoleInput(void)</font></p>
						<blockquote>
							<p>
								Returns a reference to the console input stream. This is where keyboard input goes by default.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textSetConsoleInput(objectKey newStream)</font></p>
						<blockquote>
							<p>
								Changes the console input stream. GUI programs can use this function to redirect input to a text area or text field, for example.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey textGetConsoleOutput(void)</font></p>
						<blockquote>
							<p>
								Returns a reference to the console output stream. This is where kernel logging output goes by default.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textSetConsoleOutput(objectKey newStream)</font></p>
						<blockquote>
							<p>
								Changes the console output stream. GUI programs can use this function to redirect output to a text area or text field, for example.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey textGetCurrentInput(void)</font></p>
						<blockquote>
							<p>
								Returns a reference to the input stream of the current process. This is where standard input (for example, from a getc() call) is received.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textSetCurrentInput(objectKey newStream)</font></p>
						<blockquote>
							<p>
								Changes the current input stream. GUI programs can use this function to redirect input to a text area or text field, for example.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey textGetCurrentOutput(void)</font></p>
						<blockquote>
							<p>
								Returns a reference to the console output stream.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textSetCurrentOutput(objectKey newStream)</font></p>
						<blockquote>
							<p>
								Changes the current output stream. This is where standard output (for example, from a putc() call) goes.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textGetForeground(color *foreground)</font></p>
						<blockquote>
							<p>
								Return the current foreground color in the color structure &#39;foreground&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textSetForeground(color *foreground)</font></p>
						<blockquote>
							<p>
								Set the current foreground color to the one represented in the color structure &#39;foreground&#39;. Some standard color values (as in PC text-mode values) can be found in&nbsp;<sys color.h="">.</sys></p>
						</blockquote>
						<p>
							<font face="Courier New">int textGetBackground(color *background)</font></p>
						<blockquote>
							<p>
								Return the current background color in the color structure &#39;background&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textSetBackground(color *background)</font></p>
						<blockquote>
							<p>
								Set the current background color to the one represented in the color structure &#39;background&#39;. Some standard color values (as in PC text-mode values) can be found in&nbsp;<sys color.h="">.</sys></p>
						</blockquote>
						<p>
							<font face="Courier New">int textPutc(int ascii)</font></p>
						<blockquote>
							<p>
								Print a single character</p>
						</blockquote>
						<p>
							<font face="Courier New">int textPrint(const char *str)</font></p>
						<blockquote>
							<p>
								Print a string</p>
						</blockquote>
						<p>
							<font face="Courier New">int textPrintAttrs(textAttrs *attrs, const char *str)</font></p>
						<blockquote>
							<p>
								Print a string, with attributes. See&nbsp;<sys text.h="">for the definition of the textAttrs structure.</sys></p>
						</blockquote>
						<p>
							<font face="Courier New">int textPrintLine(const char *str)</font></p>
						<blockquote>
							<p>
								Print a string with a newline at the end</p>
						</blockquote>
						<p>
							<font face="Courier New">void textNewline(void)</font></p>
						<blockquote>
							<p>
								Print a newline</p>
						</blockquote>
						<p>
							<font face="Courier New">int textBackSpace(void)</font></p>
						<blockquote>
							<p>
								Backspace the cursor, deleting any character there</p>
						</blockquote>
						<p>
							<font face="Courier New">int textTab(void)</font></p>
						<blockquote>
							<p>
								Print a tab</p>
						</blockquote>
						<p>
							<font face="Courier New">int textCursorUp(void)</font></p>
						<blockquote>
							<p>
								Move the cursor up one row. Doesn&#39;t affect any characters there.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textCursorDown(void)</font></p>
						<blockquote>
							<p>
								Move the cursor down one row. Doesn&#39;t affect any characters there.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textCursorLeft(void)</font></p>
						<blockquote>
							<p>
								Move the cursor left one column. Doesn&#39;t affect any characters there.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textCursorRight(void)</font></p>
						<blockquote>
							<p>
								Move the cursor right one column. Doesn&#39;t affect any characters there.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textEnableScroll(int enable)</font></p>
						<blockquote>
							<p>
								Enable or disable screen scrolling for the current text output stream</p>
						</blockquote>
						<p>
							<font face="Courier New">void textScroll(int upDown)</font></p>
						<blockquote>
							<p>
								Scroll the current text area up &#39;upDown&#39; screenfulls, if negative, or down &#39;upDown&#39; screenfulls, if positive.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textGetNumColumns(void)</font></p>
						<blockquote>
							<p>
								Get the total number of columns in the text area.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textGetNumRows(void)</font></p>
						<blockquote>
							<p>
								Get the total number of rows in the text area.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textGetColumn(void)</font></p>
						<blockquote>
							<p>
								Get the number of the current column. Zero-based.</p>
						</blockquote>
						<p>
							<font face="Courier New">void textSetColumn(int c)</font></p>
						<blockquote>
							<p>
								Set the number of the current column. Zero-based. Doesn&#39;t affect any characters there.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textGetRow(void)</font></p>
						<blockquote>
							<p>
								Get the number of the current row. Zero-based.</p>
						</blockquote>
						<p>
							<font face="Courier New">void textSetRow(int r)</font></p>
						<blockquote>
							<p>
								Set the number of the current row. Zero-based. Doesn&#39;t affect any characters there.</p>
						</blockquote>
						<p>
							<font face="Courier New">void textSetCursor(int on)</font></p>
						<blockquote>
							<p>
								Turn the cursor on (1) or off (0)</p>
						</blockquote>
						<p>
							<font face="Courier New">int textScreenClear(void)</font></p>
						<blockquote>
							<p>
								Erase all characters in the text area and set the row and column to (0, 0)</p>
						</blockquote>
						<p>
							<font face="Courier New">int textScreenSave(textScreen *screen)</font></p>
						<blockquote>
							<p>
								Save the current screen in the supplied structure. Use with the textScreenRestore function.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textScreenRestore(textScreen *screen)</font></p>
						<blockquote>
							<p>
								Restore the screen previously saved in the structure with the textScreenSave function</p>
						</blockquote>
						<p>
							<font face="Courier New">int textInputStreamCount(objectKey strm)</font></p>
						<blockquote>
							<p>
								Get the number of characters currently waiting in the specified input stream</p>
						</blockquote>
						<p>
							<font face="Courier New">int textInputCount(void)</font></p>
						<blockquote>
							<p>
								Get the number of characters currently waiting in the current input stream</p>
						</blockquote>
						<p>
							<font face="Courier New">int textInputStreamGetc(objectKey strm, char *cp)</font></p>
						<blockquote>
							<p>
								Get one character from the specified input stream (as an integer value).</p>
						</blockquote>
						<p>
							<font face="Courier New">int textInputGetc(char *cp)</font></p>
						<blockquote>
							<p>
								Get one character from the default input stream (as an integer value).</p>
						</blockquote>
						<p>
							<font face="Courier New">int textInputStreamReadN(objectKey strm, int num, char *buff)</font></p>
						<blockquote>
							<p>
								Read up to &#39;num&#39; characters from the specified input stream into &#39;buff&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int textInputReadN(int num, char *buff)</font></p>
						<blockquote>
							<p>
								Read up to &#39;num&#39; characters from the default input stream into &#39;buff&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int textInputStreamReadAll(objectKey strm, char *buff)</font></p>
						<blockquote>
							<p>
								Read all of the characters from the specified input stream into &#39;buff&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int textInputReadAll(char *buff)</font></p>
						<blockquote>
							<p>
								Read all of the characters from the default input stream into &#39;buff&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int textInputStreamAppend(objectKey strm, int ascii)</font></p>
						<blockquote>
							<p>
								Append a character (as an integer value) to the end of the specified input stream.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textInputAppend(int ascii)</font></p>
						<blockquote>
							<p>
								Append a character (as an integer value) to the end of the default input stream.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textInputStreamAppendN(objectKey strm, int num, char *str)</font></p>
						<blockquote>
							<p>
								Append &#39;num&#39; characters to the end of the specified input stream from &#39;str&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int textInputAppendN(int num, char *str)</font></p>
						<blockquote>
							<p>
								Append &#39;num&#39; characters to the end of the default input stream from &#39;str&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int textInputStreamRemove(objectKey strm)</font></p>
						<blockquote>
							<p>
								Remove one character from the start of the specified input stream.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textInputRemove(void)</font></p>
						<blockquote>
							<p>
								Remove one character from the start of the default input stream.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textInputStreamRemoveN(objectKey strm, int num)</font></p>
						<blockquote>
							<p>
								Remove &#39;num&#39; characters from the start of the specified input stream.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textInputRemoveN(int num)</font></p>
						<blockquote>
							<p>
								Remove &#39;num&#39; characters from the start of the default input stream.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textInputStreamRemoveAll(objectKey strm)</font></p>
						<blockquote>
							<p>
								Empty the specified input stream.</p>
						</blockquote>
						<p>
							<font face="Courier New">int textInputRemoveAll(void)</font></p>
						<blockquote>
							<p>
								Empty the default input stream.</p>
						</blockquote>
						<p>
							<font face="Courier New">void textInputStreamSetEcho(objectKey strm, int onOff)</font></p>
						<blockquote>
							<p>
								Set echo on (1) or off (0) for the specified input stream. When on, any characters typed will be automatically printed to the text area. When off, they won&#39;t.</p>
						</blockquote>
						<p>
							<font face="Courier New">void textInputSetEcho(int onOff)</font></p>
						<blockquote>
							<p>
								Set echo on (1) or off (0) for the default input stream. When on, any characters typed will be automatically printed to the text area. When off, they won&#39;t.</p>
						</blockquote>
						<p>
							&nbsp;</p>
						<p>
							&nbsp;</p>
						<p>
							<b><a name="disk"></a>Disk functions</b></p>
						<p>
							&nbsp;</p>
						<p>
							<font face="Courier New">int diskReadPartitions(const char *name)</font></p>
						<blockquote>
							<p>
								Tells the kernel to (re)read the partition table of disk &#39;name&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskReadPartitionsAll(void)</font></p>
						<blockquote>
							<p>
								Tells the kernel to (re)read all the disks&#39; partition tables.</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskSync(const char *name)</font></p>
						<blockquote>
							<p>
								Tells the kernel to synchronize the named disk, flushing any output.</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskSyncAll(void)</font></p>
						<blockquote>
							<p>
								Tells the kernel to synchronize all the disks, flushing any output.</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskGetBoot(char *name)</font></p>
						<blockquote>
							<p>
								Get the disk name of the boot device. Normally this will contain the root filesystem.</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskGetCount(void)</font></p>
						<blockquote>
							<p>
								Get the number of logical disk volumes recognized by the system</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskGetPhysicalCount(void)</font></p>
						<blockquote>
							<p>
								Get the number of physical disk devices recognized by the system</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskGet(const char *name, disk *userDisk)</font></p>
						<blockquote>
							<p>
								Given a disk name string &#39;name&#39;, fill in the corresponding user space disk structure &#39;userDisk.</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskGetAll(disk *userDiskArray, unsigned buffSize)</font></p>
						<blockquote>
							<p>
								Return user space disk structures in &#39;userDiskArray&#39; for each logical disk, up to &#39;buffSize&#39; bytes.</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskGetAllPhysical(disk *userDiskArray, unsigned buffSize)</font></p>
						<blockquote>
							<p>
								Return user space disk structures in &#39;userDiskArray&#39; for each physical disk, up to &#39;buffSize&#39; bytes.</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskGetFilesystemType(const char *name, char *buf, unsigned bufSize)</font></p>
						<blockquote>
							<p>
								This function attempts to explicitly detect the filesystem type on disk &#39;name&#39;, and copy up to &#39;bufSize&#39; bytes of the filesystem type name into &#39;buf&#39;. Particularly useful for things like removable media where the correct info may not be automatically provided in the disk structure.</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskGetMsdosPartType(int tag, msdosPartType *p)</font></p>
						<blockquote>
							<p>
								Gets the MS-DOS partition type description for the corresponding tag. This function was added specifically for use by programs such as &#39;fdisk&#39; to get descriptions of different MS-DOS types known to the kernel.</p>
						</blockquote>
						<p>
							<font face="Courier New">msdosPartType *diskGetMsdosPartTypes(void)</font></p>
						<blockquote>
							<p>
								Like diskGetMsdosPartType(), but returns a pointer to a list of all known MS-DOS types. The memory is allocated dynamically and should be deallocated with a call to memoryRelease()</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskGetGptPartType(guid *g, gptPartType *p)</font></p>
						<blockquote>
							<p>
								Gets the GPT partition type description for the corresponding GUID. This function was added specifically for use by programs such as &#39;fdisk&#39; to get descriptions of different GPT types known to the kernel.</p>
						</blockquote>
						<p>
							<font face="Courier New">gptPartType *diskGetGptPartTypes(void)</font></p>
						<blockquote>
							<p>
								Like diskGetGptPartType(), but returns a pointer to a list of all known GPT types. The memory is allocated dynamically and should be deallocated with a call to memoryRelease()</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskSetFlags(const char *name, unsigned flags, int set)</font></p>
						<blockquote>
							<p>
								Set or clear the (user-settable) disk flags bits in &#39;flags&#39; of the disk &#39;name&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskSetLockState(const char *name, int state)</font></p>
						<blockquote>
							<p>
								Set the locked state of the disk &#39;name&#39; to either unlocked (0) or locked (1)</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskSetDoorState(const char *name, int state)</font></p>
						<blockquote>
							<p>
								Open (1) or close (0) the disk &#39;name&#39;. May require a unlocking the door first, see diskSetLockState().</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskGetMediaState(const char *diskName)</font></p>
						<blockquote>
							<p>
								Returns 1 if the removable disk &#39;diskName&#39; is known to have media present.</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskReadSectors(const char *name, uquad_t sect, uquad_t count, void *buf)</font></p>
						<blockquote>
							<p>
								Read &#39;count&#39; sectors from disk &#39;name&#39;, starting at (zero-based) logical sector number &#39;sect&#39;. Put the data in memory area &#39;buf&#39;. This function requires supervisor privilege.</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskWriteSectors(const char *name, uquad_t sect, uquad_t count, const void *buf)</font></p>
						<blockquote>
							<p>
								Write &#39;count&#39; sectors to disk &#39;name&#39;, starting at (zero-based) logical sector number &#39;sect&#39;. Get the data from memory area &#39;buf&#39;. This function requires supervisor privilege.</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskEraseSectors(const char *name, uquad_t sect, uquad_t count, int passes)</font></p>
						<blockquote>
							<p>
								Synchronously and securely erases disk sectors. It writes (&#39;passes&#39; - 1) successive passes of random data followed by a final pass of NULLs, to disk &#39;name&#39; starting at (zero-based) logical sector number &#39;sect&#39;. This function requires supervisor privilege.</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskGetStats(const char *name, diskStats *stats)</font></p>
						<blockquote>
							<p>
								Return performance stats about the disk &#39;name&#39; (if non-NULL,</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskRamDiskCreate(unsigned size, char *name)</font></p>
						<blockquote>
							<p>
								Given a size in bytes, and a pointer to a buffer &#39;name&#39;, create a RAM disk. If &#39;name&#39; is non-NULL, place the name of the new disk in the buffer.</p>
						</blockquote>
						<p>
							<font face="Courier New">int diskRamDiskDestroy(const char *name)</font></p>
						<blockquote>
							<p>
								Given the name of an existing RAM disk &#39;name&#39;, destroy and deallocate it.</p>
						</blockquote>
						<p>
							&nbsp;</p>
						<p>
							&nbsp;</p>
						<p>
							<b><a name="filesystem"></a>Filesystem functions</b></p>
						<p>
							&nbsp;</p>
						<p>
							<font face="Courier New">int filesystemFormat(const char *theDisk, const char *type, const char *label, int longFormat, progress *prog)</font></p>
						<blockquote>
							<p>
								Format the logical volume &#39;theDisk&#39;, with a string &#39;type&#39; representing the preferred filesystem type (for example, &quot;fat&quot;, &quot;fat16&quot;, &quot;fat32, etc). Label it with &#39;label&#39;. &#39;longFormat&#39; will do a sector-by-sector format, if supported, and progress can optionally be monitored by passing a non-NULL progress structure pointer &#39;prog&#39;. It is optional for filesystem drivers to implement this function.</p>
						</blockquote>
						<p>
							<font face="Courier New">int filesystemClobber(const char *theDisk)</font></p>
						<blockquote>
							<p>
								Clobber all known filesystem types on the logical volume &#39;theDisk&#39;. It is optional for filesystem drivers to implement this function.</p>
						</blockquote>
						<p>
							<font face="Courier New">int filesystemCheck(const char *name, int force, int repair, progress *prog)</font></p>
						<blockquote>
							<p>
								Check the filesystem on disk &#39;name&#39;. If &#39;force&#39; is non-zero, the filesystem will be checked regardless of whether the filesystem driver thinks it needs to be. If &#39;repair&#39; is non-zero, the filesystem driver will attempt to repair any errors found. If &#39;repair&#39; is zero, a non-zero return value may indicate that errors were found. If &#39;repair&#39; is non-zero, a non-zero return value may indicate that errors were found but could not be fixed. Progress can optionally be monitored by passing a non-NULL progress structure pointer &#39;prog&#39;. It is optional for filesystem drivers to implement this function.</p>
						</blockquote>
						<p>
							<font face="Courier New">int filesystemDefragment(const char *name, progress *prog)</font></p>
						<blockquote>
							<p>
								Defragment the filesystem on disk &#39;name&#39;. Progress can optionally be monitored by passing a non-NULL progress structure pointer &#39;prog&#39;. It is optional for filesystem drivers to implement this function.</p>
						</blockquote>
						<p>
							<font face="Courier New">int filesystemResizeConstraints(const char *name, uquad_t *minBlocks, uquad_t *maxBlocks)</font></p>
						<blockquote>
							<p>
								Get the minimum (&#39;minBlocks&#39;) and maximum (&#39;maxBlocks&#39;) number of blocks for a filesystem resize on disk &#39;name&#39;. It is optional for filesystem drivers to implement this function.</p>
						</blockquote>
						<p>
							<font face="Courier New">int filesystemResize(const char *name, uquad_t blocks, progress *prog)</font></p>
						<blockquote>
							<p>
								Resize the filesystem on disk &#39;name&#39; to the given number of blocks &#39;blocks&#39;. Progress can optionally be monitored by passing a non-NULL progress structure pointer &#39;prog&#39;. It is optional for filesystem drivers to implement this function.</p>
						</blockquote>
						<p>
							<font face="Courier New">int filesystemMount(const char *name, const char *mp)</font></p>
						<blockquote>
							<p>
								Mount the filesystem on disk &#39;name&#39;, using the mount point specified by the absolute pathname &#39;mp&#39;. Note that no file or directory called &#39;mp&#39; should exist, as the mount function will expect to be able to create it.</p>
						</blockquote>
						<p>
							<font face="Courier New">int filesystemUnmount(const char *mp)</font></p>
						<blockquote>
							<p>
								Unmount the filesystem mounted represented by the mount point &#39;fs&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">uquad_t filesystemGetFreeBytes(const char *fs)</font></p>
						<blockquote>
							<p>
								Returns the amount of free space, in bytes, on the filesystem represented by the mount point &#39;fs&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">unsigned filesystemGetBlockSize(const char *fs)</font></p>
						<blockquote>
							<p>
								Returns the block size (for example, 512 or 1024) of the filesystem represented by the mount point &#39;fs&#39;.</p>
						</blockquote>
						<p>
							&nbsp;</p>
						<p>
							&nbsp;</p>
						<p>
							<b><a name="file"></a>File functions</b></p>
						<p>
							Note that in all of the functions of this section, any reference to pathnames means absolute pathnames, from root. E.g. &#39;/files/myfile&#39;, not simply &#39;myfile&#39;. From the kernel&#39;s point of view, &#39;myfile&#39; might be ambiguous.</p>
						<p>
							&nbsp;</p>
						<p>
							<font face="Courier New">int fileFixupPath(const char *origPath, char *newPath)</font></p>
						<blockquote>
							<p>
								Take the absolute pathname in &#39;origPath&#39; and fix it up. This means eliminating extra file separator characters (for example) and resolving links or &#39;.&#39; or &#39;..&#39; components in the pathname.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileGetDisk(const char *path, disk *d)</font></p>
						<blockquote>
							<p>
								Given the file name &#39;path&#39;, return the user space structure for the logical disk that the file resides on.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileCount(const char *path)</font></p>
						<blockquote>
							<p>
								Get the count of file entries from the directory referenced by &#39;path&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileFirst(const char *path, file *f)</font></p>
						<blockquote>
							<p>
								Get the first file from the directory referenced by &#39;path&#39;. Put the information in the file structure &#39;f&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileNext(const char *path, file *f)</font></p>
						<blockquote>
							<p>
								Get the next file from the directory referenced by &#39;path&#39;. &#39;f&#39; should be a file structure previously filled by a call to either fileFirst() or fileNext().</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileFind(const char *name, file *f)</font></p>
						<blockquote>
							<p>
								Find the file referenced by &#39;name&#39;, and fill the file data structure &#39;f&#39; with the results if successful.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileOpen(const char *name, int mode, file *f)</font></p>
						<blockquote>
							<p>
								Open the file referenced by &#39;name&#39; using the file open mode &#39;mode&#39; (defined in&nbsp;<sys file.h="">). Update the file data structure &#39;f&#39; if successful.</sys></p>
						</blockquote>
						<p>
							<font face="Courier New">int fileClose(file *f)</font></p>
						<blockquote>
							<p>
								Close the previously opened file &#39;f&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileRead(file *f, unsigned blocknum, unsigned blocks, void *buff)</font></p>
						<blockquote>
							<p>
								Read data from the previously opened file &#39;f&#39;. &#39;f&#39; should have been opened in a read or read/write mode. Read &#39;blocks&#39; blocks (see the filesystem functions for information about getting the block size of a given filesystem) and put them in buffer &#39;buff&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileWrite(file *f, unsigned blocknum, unsigned blocks, void *buff)</font></p>
						<blockquote>
							<p>
								Write data to the previously opened file &#39;f&#39;. &#39;f&#39; should have been opened in a write or read/write mode. Write &#39;blocks&#39; blocks (see the filesystem functions for information about getting the block size of a given filesystem) from the buffer &#39;buff&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileDelete(const char *name)</font></p>
						<blockquote>
							<p>
								Delete the file referenced by the pathname &#39;name&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileDeleteRecursive(const char *name)</font></p>
						<blockquote>
							<p>
								Recursively delete filesystem items, starting with the one referenced by the pathname &#39;name&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileDeleteSecure(const char *name, int passes)</font></p>
						<blockquote>
							<p>
								Securely delete the file referenced by the pathname &#39;name&#39;. &#39;passes&#39; indicates the number of times to overwrite the file. The file is overwritten (number - 1) times with random data, and then NULLs. A larger number of passes is more secure but takes longer.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileMakeDir(const char *name)</font></p>
						<blockquote>
							<p>
								Create a directory to be referenced by the pathname &#39;name&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileRemoveDir(const char *name)</font></p>
						<blockquote>
							<p>
								Remove the directory referenced by the pathname &#39;name&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileCopy(const char *src, const char *dest)</font></p>
						<blockquote>
							<p>
								Copy the file referenced by the pathname &#39;src&#39; to the pathname &#39;dest&#39;. This will overwrite &#39;dest&#39; if it already exists.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileCopyRecursive(const char *src, const char *dest)</font></p>
						<blockquote>
							<p>
								Recursively copy the file referenced by the pathname &#39;src&#39; to the pathname &#39;dest&#39;. If &#39;src&#39; is a regular file, the result will be the same as using the non-recursive call. However if it is a directory, all contents of the directory and its subdirectories will be copied. This will overwrite any files in the &#39;dest&#39; tree if they already exist.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileMove(const char *src, const char *dest)</font></p>
						<blockquote>
							<p>
								Move (rename) a file referenced by the pathname &#39;src&#39; to the pathname &#39;dest&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileTimestamp(const char *name)</font></p>
						<blockquote>
							<p>
								Update the time stamp on the file referenced by the pathname &#39;name&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileSetSize(file *f, unsigned size)</font></p>
						<blockquote>
							<p>
								Change the length of the file &#39;file&#39; to the new length &#39;length&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileGetTemp(file *f)</font></p>
						<blockquote>
							<p>
								Create and open a temporary file in write mode.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileGetFullPath(file *f, char *buff, int len)</font></p>
						<blockquote>
							<p>
								Given a file structure, return up to &#39;len&#39; bytes of the fully-qualified file name in the buffer &#39;buff&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileStreamOpen(const char *name, int mode, fileStream *f)</font></p>
						<blockquote>
							<p>
								Open the file referenced by the pathname &#39;name&#39; for streaming operations, using the open mode &#39;mode&#39; (defined in&nbsp;<sys file.h="">). Fills the fileStream data structure &#39;f&#39; with information needed for subsequent filestream operations.</sys></p>
						</blockquote>
						<p>
							<font face="Courier New">int fileStreamSeek(fileStream *f, unsigned offset)</font></p>
						<blockquote>
							<p>
								Seek the filestream &#39;f&#39; to the absolute position &#39;offset&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileStreamRead(fileStream *f, unsigned bytes, char *buff)</font></p>
						<blockquote>
							<p>
								Read &#39;bytes&#39; bytes from the filestream &#39;f&#39; and put them into &#39;buff&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileStreamReadLine(fileStream *f, unsigned bytes, char *buff)</font></p>
						<blockquote>
							<p>
								Read a complete line of text from the filestream &#39;f&#39;, and put up to &#39;bytes&#39; characters into &#39;buff&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileStreamWrite(fileStream *f, unsigned bytes, char *buff)</font></p>
						<blockquote>
							<p>
								Write &#39;bytes&#39; bytes from the buffer &#39;buff&#39; to the filestream &#39;f&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileStreamWriteStr(fileStream *f, char *buff)</font></p>
						<blockquote>
							<p>
								Write the string in &#39;buff&#39; to the filestream &#39;f&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileStreamWriteLine(fileStream *f, char *buff)</font></p>
						<blockquote>
							<p>
								Write the string in &#39;buff&#39; to the filestream &#39;f&#39;, and add a newline at the end</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileStreamFlush(fileStream *f)</font></p>
						<blockquote>
							<p>
								Flush filestream &#39;f&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileStreamClose(fileStream *f)</font></p>
						<blockquote>
							<p>
								[Flush and] close the filestream &#39;f&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fileStreamGetTemp(fileStream *f)</font></p>
						<blockquote>
							<p>
								Open a temporary filestream &#39;f&#39;.</p>
						</blockquote>
						<p>
							&nbsp;</p>
						<p>
							&nbsp;</p>
						<p>
							<b><a name="memory"></a>Memory functions</b></p>
						<p>
							&nbsp;</p>
						<p>
							<font face="Courier New">void *memoryGet(unsigned size, const char *desc)</font></p>
						<blockquote>
							<p>
								Return a pointer to a new block of memory of size &#39;size&#39; and (optional) physical alignment &#39;align&#39;, adding the (optional) description &#39;desc&#39;. If no specific alignment is required, use &#39;0&#39;. Memory allocated using this function is automatically cleared (like &#39;calloc&#39;).</p>
						</blockquote>
						<p>
							<font face="Courier New">int memoryRelease(void *p)</font></p>
						<blockquote>
							<p>
								Release the memory block starting at the address &#39;p&#39;. Must have been previously allocated using the memoryRequestBlock() function.</p>
						</blockquote>
						<p>
							<font face="Courier New">int memoryReleaseAllByProcId(int pid)</font></p>
						<blockquote>
							<p>
								Release all memory allocated to/by the process referenced by process ID &#39;pid&#39;. Only privileged functions can release memory owned by other processes.</p>
						</blockquote>
						<p>
							<font face="Courier New">int memoryGetStats(memoryStats *stats, int kernel)</font></p>
						<blockquote>
							<p>
								Returns the current memory totals and usage values to the current output stream. If non-zero, the flag &#39;kernel&#39; will return kernel heap statistics instead of overall system statistics.</p>
						</blockquote>
						<p>
							<font face="Courier New">int memoryGetBlocks(memoryBlock *blocksArray, unsigned buffSize, int kernel)</font></p>
						<blockquote>
							<p>
								Returns a copy of the array of used memory blocks in &#39;blocksArray&#39;, up to &#39;buffSize&#39; bytes. If non-zero, the flag &#39;kernel&#39; will return kernel heap blocks instead of overall heap allocations.</p>
						</blockquote>
						<p>
							<font face="Courier New">int memoryBlockInfo(void *p, memoryBlock *block)</font></p>
						<blockquote>
							<p>
								Fills in the structure &#39;block&#39; with information about the allocated memory block starting at virtual address &#39;p&#39;</p>
						</blockquote>
						<p>
							&nbsp;</p>
						<p>
							&nbsp;</p>
						<p>
							<b><a name="multitasker"></a>Multitasker functions</b></p>
						<p>
							&nbsp;</p>
						<p>
							<font face="Courier New">int multitaskerCreateProcess(const char *name, int privilege, processImage *execImage)</font></p>
						<blockquote>
							<p>
								Create a new process. &#39;name&#39; will be the new process&#39; name. &#39;privilege&#39; is the privilege level. &#39;execImage&#39; is a processImage structure that describes the loaded location of the file, the program&#39;s desired virtual address, entry point, size, etc. If the value returned by the call is a positive integer, the call was successful and the value is the new process&#39; process ID. New processes are created and left in a stopped state, so if you want it to run you will need to set it to a running state (&#39;ready&#39;, actually) using the function call multitaskerSetProcessState().</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerSpawn(void *addr, const char *name, int numargs, void *args[])</font></p>
						<blockquote>
							<p>
								Spawn a thread from the current process. The starting point of the code (for example, a function address) should be specified as &#39;addr&#39;. &#39;name&#39; will be the new thread&#39;s name. &#39;numargs&#39; and &#39;args&#39; will be passed as the &quot;int argc, char *argv[]) parameters of the new thread. If there are no arguments, these should be 0 and NULL, respectively. If the value returned by the call is a positive integer, the call was successful and the value is the new thread&#39;s process ID. New threads are created and made runnable, so there is no need to change its state to activate it.</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerGetCurrentProcessId(void)</font></p>
						<blockquote>
							<p>
								Returns the process ID of the calling program.</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerGetProcess(int pid, process *proc)</font></p>
						<blockquote>
							<p>
								Returns the process structure for the supplied process ID.</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerGetProcessByName(const char *name, process *proc)</font></p>
						<blockquote>
							<p>
								Returns the process structure for the supplied process name</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerGetProcesses(void *buffer, unsigned buffSize)</font></p>
						<blockquote>
							<p>
								Fills &#39;buffer&#39; with up to &#39;buffSize&#39; bytes&#39; worth of process structures, and returns the number of structures copied.</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerSetProcessState(int pid, int state)</font></p>
						<blockquote>
							<p>
								Sets the state of the process referenced by process ID &#39;pid&#39; to the new state &#39;state&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerProcessIsAlive(int pid)</font></p>
						<blockquote>
							<p>
								Returns 1 if the process with the id &#39;pid&#39; still exists and is in a &#39;runnable&#39; (viable) state. Returns 0 if the process does not exist or is in a &#39;finished&#39; state.</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerSetProcessPriority(int pid, int priority)</font></p>
						<blockquote>
							<p>
								Sets the priority of the process referenced by process ID &#39;pid&#39; to &#39;priority&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerGetProcessPrivilege(int pid)</font></p>
						<blockquote>
							<p>
								Gets the privilege level of the process referenced by process ID &#39;pid&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerGetCurrentDirectory(char *buff, int buffsz)</font></p>
						<blockquote>
							<p>
								Returns the absolute pathname of the calling process&#39; current directory. Puts the value in the buffer &#39;buff&#39; which is of size &#39;buffsz&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerSetCurrentDirectory(const char *buff)</font></p>
						<blockquote>
							<p>
								Sets the current directory of the calling process to the absolute pathname &#39;buff&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey multitaskerGetTextInput(void)</font></p>
						<blockquote>
							<p>
								Get an object key to refer to the current text input stream of the calling process.</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerSetTextInput(int processId, objectKey key)</font></p>
						<blockquote>
							<p>
								Set the text input stream of the process referenced by process ID &#39;processId&#39; to a text stream referenced by the object key &#39;key&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey multitaskerGetTextOutput(void)</font></p>
						<blockquote>
							<p>
								Get an object key to refer to the current text output stream of the calling process.</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerSetTextOutput(int processId, objectKey key)</font></p>
						<blockquote>
							<p>
								Set the text output stream of the process referenced by process ID &#39;processId&#39; to a text stream referenced by the object key &#39;key&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerDuplicateIO(int pid1, int pid2, int clear)</font></p>
						<blockquote>
							<p>
								Set &#39;pid2&#39; to use the same input and output streams as &#39;pid1&#39;, and if &#39;clear&#39; is non-zero, clear any pending input or output.</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerGetProcessorTime(clock_t *clk)</font></p>
						<blockquote>
							<p>
								Fill the clock_t structure with the amount of processor time consumed by the calling process.</p>
						</blockquote>
						<p>
							<font face="Courier New">void multitaskerYield(void)</font></p>
						<blockquote>
							<p>
								Yield the remainder of the current processor timeslice back to the multitasker&#39;s scheduler. It&#39;s nice to do this when you are waiting for some event, so that your process is not &#39;hungry&#39; (i.e. hogging processor cycles unnecessarily).</p>
						</blockquote>
						<p>
							<font face="Courier New">void multitaskerWait(unsigned ticks)</font></p>
						<blockquote>
							<p>
								Yield the remainder of the current processor timeslice back to the multitasker&#39;s scheduler, and wait at least &#39;ticks&#39; timer ticks before running the calling process again. On the PC, one second is approximately 20 system timer ticks.</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerBlock(int pid)</font></p>
						<blockquote>
							<p>
								Yield the remainder of the current processor timeslice back to the multitasker&#39;s scheduler, and block on the process referenced by process ID &#39;pid&#39;. This means that the calling process will not run again until process &#39;pid&#39; has terminated. The return value of this function is the return value of process &#39;pid&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerDetach(void)</font></p>
						<blockquote>
							<p>
								This allows a program to &#39;daemonize&#39;, detaching from the IO streams of its parent and, if applicable, the parent stops blocking. Useful for a process that want to operate in the background, or that doesn&#39;t want to be killed if its parent is killed.</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerKillProcess(int pid, int force)</font></p>
						<blockquote>
							<p>
								Terminate the process referenced by process ID &#39;pid&#39;. If &#39;force&#39; is non-zero, the multitasker will attempt to ignore any errors and dismantle the process with extreme prejudice. The &#39;force&#39; flag also has the necessary side effect of killing any child threads spawned by process &#39;pid&#39;. (Otherwise, &#39;pid&#39; is left in a stopped state until its threads have terminated normally).</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerKillByName(const char *name, int force)</font></p>
						<blockquote>
							<p>
								Like multitaskerKillProcess, except that it attempts to kill all instances of processes whose names match &#39;name&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerTerminate(int code)</font></p>
						<blockquote>
							<p>
								Terminate the calling process, returning the exit code &#39;code&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerSignalSet(int processId, int sig, int on)</font></p>
						<blockquote>
							<p>
								Set the current process&#39; signal handling enabled (on) or disabled for the specified signal number &#39;sig&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerSignal(int processId, int sig)</font></p>
						<blockquote>
							<p>
								Send the requested signal &#39;sig&#39; to the process &#39;processId&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerSignalRead(int processId)</font></p>
						<blockquote>
							<p>
								Returns the number code of the next pending signal for the current process, or 0 if no signals are pending.</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerGetIOPerm(int processId, int portNum)</font></p>
						<blockquote>
							<p>
								Returns 1 if the process with process ID &#39;processId&#39; can do I/O on port &#39;portNum&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerSetIOPerm(int processId, int portNum, int yesNo)</font></p>
						<blockquote>
							<p>
								Set I/O permission port &#39;portNum&#39; for the process with process ID &#39;processId&#39;. If &#39;yesNo&#39; is non-zero, permission will be granted.</p>
						</blockquote>
						<p>
							<font face="Courier New">int multitaskerStackTrace(int processId)</font></p>
						<blockquote>
							<p>
								Print a stack trace for the process with process ID &#39;processId&#39;.</p>
						</blockquote>
						<p>
							&nbsp;</p>
						<p>
							&nbsp;</p>
						<p>
							<b><a name="loader"></a>Loader functions</b></p>
						<p>
							&nbsp;</p>
						<p>
							<font face="Courier New">void *loaderLoad(const char *filename, file *theFile)</font></p>
						<blockquote>
							<p>
								Load a file referenced by the pathname &#39;filename&#39;, and fill the file data structure &#39;theFile&#39; with the details. The pointer returned points to the resulting file data.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey loaderClassify(const char *fileName, void *fileData, int size, loaderFileClass *fileClass)</font></p>
						<blockquote>
							<p>
								Given a file by the name &#39;fileName&#39;, the contents &#39;fileData&#39;, of size &#39;size&#39;, get the kernel loader&#39;s idea of the file type. If successful, the return value is non-NULL and the loaderFileClass structure &#39;fileClass&#39; is filled out with the known information.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey loaderClassifyFile(const char *fileName, loaderFileClass *fileClass)</font></p>
						<blockquote>
							<p>
								Like loaderClassify(), except the first argument &#39;fileName&#39; is a file name to classify. Returns the kernel loader&#39;s idea of the file type. If successful, the return value is non-NULL and the loaderFileClass structure &#39;fileClass&#39; is filled out with the known information.</p>
						</blockquote>
						<p>
							<font face="Courier New">loaderSymbolTable *loaderGetSymbols(const char *fileName)</font></p>
						<blockquote>
							<p>
								Given a binary executable, library, or object file &#39;fileName&#39;, return a loaderSymbolTable structure filled out with the loader symbols from the file.</p>
						</blockquote>
						<p>
							<font face="Courier New">int loaderCheckCommand(const char *command)</font></p>
						<blockquote>
							<p>
								Takes a command line string &#39;command&#39; and ensures that the program (the first part of the string) exists.</p>
						</blockquote>
						<p>
							<font face="Courier New">int loaderLoadProgram(const char *command, int privilege)</font></p>
						<blockquote>
							<p>
								Run &#39;command&#39; as a process with the privilege level &#39;privilege&#39;. If successful, the call&#39;s return value is the process ID of the new process. The process is left in a stopped state and must be set to a running state explicitly using the multitasker function multitaskerSetProcessState() or the loader function loaderExecProgram().</p>
						</blockquote>
						<p>
							<font face="Courier New">int loaderLoadLibrary(const char *libraryName)</font></p>
						<blockquote>
							<p>
								This takes the name of a library file &#39;libraryName&#39; to load and creates a shared library in the kernel. This function is not especially useful to user programs, since normal shared library loading happens automatically as part of the &#39;loaderLoadProgram&#39; process.</p>
						</blockquote>
						<p>
							<font face="Courier New">void *loaderGetLibrary(const char *libraryName)</font></p>
						<blockquote>
							<p>
								Takes the name of a library file &#39;libraryName&#39; and if necessary, loads the shared library into the kernel. Returns an (kernel-only) reference to the library. This function is not especially useful to user programs, since normal shared library loading happens automatically as part of the &#39;loaderLoadProgram&#39; process.</p>
						</blockquote>
						<p>
							<font face="Courier New">void *loaderLinkLibrary(const char *libraryName)</font></p>
						<blockquote>
							<p>
								Takes the name of a library file &#39;libraryName&#39; and if necessary, loads the shared library into the kernel. Next, the library is linked into the current process. Returns an (kernel-only) reference to the library. This function is not especially useful to user programs, since normal shared library loading happens automatically as part of the &#39;loaderLoadProgram&#39; process. Used by the dlopen() and friends library functions.</p>
						</blockquote>
						<p>
							<font face="Courier New">void *loaderGetSymbol(const char *symbolName)</font></p>
						<blockquote>
							<p>
								Takes a symbol name, and returns the address of the symbol in the current process. This function is not especially useful to user programs, since normal shared library loading happens automatically as part of the &#39;loaderLoadProgram&#39; process. Used by the dlopen() and friends library functions.</p>
						</blockquote>
						<p>
							<font face="Courier New">int loaderExecProgram(int processId, int block)</font></p>
						<blockquote>
							<p>
								Execute the process referenced by process ID &#39;processId&#39;. If &#39;block&#39; is non-zero, the calling process will block until process &#39;pid&#39; has terminated, and the return value of the call is the return value of process &#39;pid&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int loaderLoadAndExec(const char *command, int privilege, int block)</font></p>
						<blockquote>
							<p>
								This function is just for convenience, and is an amalgamation of the loader functions loaderLoadProgram() and loaderExecProgram().</p>
						</blockquote>
						<p>
							&nbsp;</p>
						<p>
							&nbsp;</p>
						<p>
							<b><a name="rtc"></a>Real-time clock functions</b></p>
						<p>
							&nbsp;</p>
						<p>
							<font face="Courier New">int rtcReadSeconds(void)</font></p>
						<blockquote>
							<p>
								Get the current seconds value.</p>
						</blockquote>
						<p>
							<font face="Courier New">int rtcReadMinutes(void)</font></p>
						<blockquote>
							<p>
								Get the current minutes value.</p>
						</blockquote>
						<p>
							<font face="Courier New">int rtcReadHours(void)</font></p>
						<blockquote>
							<p>
								Get the current hours value.</p>
						</blockquote>
						<p>
							<font face="Courier New">int rtcDayOfWeek(unsigned day, unsigned month, unsigned year)</font></p>
						<blockquote>
							<p>
								Get the current day of the week value.</p>
						</blockquote>
						<p>
							<font face="Courier New">int rtcReadDayOfMonth(void)</font></p>
						<blockquote>
							<p>
								Get the current day of the month value.</p>
						</blockquote>
						<p>
							<font face="Courier New">int rtcReadMonth(void)</font></p>
						<blockquote>
							<p>
								Get the current month value.</p>
						</blockquote>
						<p>
							<font face="Courier New">int rtcReadYear(void)</font></p>
						<blockquote>
							<p>
								Get the current year value.</p>
						</blockquote>
						<p>
							<font face="Courier New">unsigned rtcUptimeSeconds(void)</font></p>
						<blockquote>
							<p>
								Get the number of seconds the system has been running.</p>
						</blockquote>
						<p>
							<font face="Courier New">int rtcDateTime(struct tm *theTime)</font></p>
						<blockquote>
							<p>
								Get the current data and time as a tm data structure in &#39;theTime&#39;.</p>
						</blockquote>
						<p>
							&nbsp;</p>
						<p>
							&nbsp;</p>
						<p>
							<b><a name="random"></a>Random number functions</b></p>
						<p>
							&nbsp;</p>
						<p>
							<font face="Courier New">unsigned randomUnformatted(void)</font></p>
						<blockquote>
							<p>
								Get an unformatted random unsigned number. Just any unsigned number.</p>
						</blockquote>
						<p>
							<font face="Courier New">unsigned randomFormatted(unsigned start, unsigned end)</font></p>
						<blockquote>
							<p>
								Get a random unsigned number between the start value &#39;start&#39; and the end value &#39;end&#39;, inclusive.</p>
						</blockquote>
						<p>
							<font face="Courier New">unsigned randomSeededUnformatted(unsigned seed)</font></p>
						<blockquote>
							<p>
								Get an unformatted random unsigned number, using the random seed &#39;seed&#39; instead of the kernel&#39;s default random seed.</p>
						</blockquote>
						<p>
							<font face="Courier New">unsigned randomSeededFormatted(unsigned seed, unsigned start, unsigned end)</font></p>
						<blockquote>
							<p>
								Get a random unsigned number between the start value &#39;start&#39; and the end value &#39;end&#39;, inclusive, using the random seed &#39;seed&#39; instead of the kernel&#39;s default random seed.</p>
						</blockquote>
						<p>
							<font face="Courier New">void randomBytes(unsigned char *buffer, unsigned size)</font></p>
						<blockquote>
							<p>
								Given the supplied buffer and size, fill the buffer with random bytes.</p>
						</blockquote>
						<p>
							&nbsp;</p>
						<p>
							&nbsp;</p>
						<p>
							<b><a name="environment"></a>Environment functions</b></p>
						<p>
							&nbsp;</p>
						<p>
							<font face="Courier New">int environmentGet(const char *var, char *buf, unsigned bufsz)</font></p>
						<blockquote>
							<p>
								Get the value of the environment variable named &#39;var&#39;, and put it into the buffer &#39;buf&#39; of size &#39;bufsz&#39; if successful.</p>
						</blockquote>
						<p>
							<font face="Courier New">int environmentSet(const char *var, const char *val)</font></p>
						<blockquote>
							<p>
								Set the environment variable &#39;var&#39; to the value &#39;val&#39;, overwriting any old value that might have been previously set.</p>
						</blockquote>
						<p>
							<font face="Courier New">int environmentUnset(const char *var)</font></p>
						<blockquote>
							<p>
								Delete the environment variable &#39;var&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">void environmentDump(void)</font></p>
						<blockquote>
							<p>
								Print a listing of all the currently set environment variables in the calling process&#39; environment space to the current text output stream.</p>
						</blockquote>
						<p>
							&nbsp;</p>
						<p>
							&nbsp;</p>
						<p>
							<b><a name="graphics"></a>Raw graphics functions</b></p>
						<p>
							&nbsp;</p>
						<p>
							<font face="Courier New">int graphicsAreEnabled(void)</font></p>
						<blockquote>
							<p>
								Returns 1 if the kernel is operating in graphics mode.</p>
						</blockquote>
						<p>
							<font face="Courier New">int graphicGetModes(videoMode *buffer, unsigned size)</font></p>
						<blockquote>
							<p>
								Get up to &#39;size&#39; bytes worth of videoMode structures in &#39;buffer&#39; for the supported video modes of the current hardware.</p>
						</blockquote>
						<p>
							<font face="Courier New">int graphicGetMode(videoMode *mode)</font></p>
						<blockquote>
							<p>
								Get the current video mode in &#39;mode&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int graphicSetMode(videoMode *mode)</font></p>
						<blockquote>
							<p>
								Set the video mode in &#39;mode&#39;. Generally this will require a reboot in order to take effect.</p>
						</blockquote>
						<p>
							<font face="Courier New">int graphicGetScreenWidth(void)</font></p>
						<blockquote>
							<p>
								Returns the width of the graphics screen.</p>
						</blockquote>
						<p>
							<font face="Courier New">int graphicGetScreenHeight(void)</font></p>
						<blockquote>
							<p>
								Returns the height of the graphics screen.</p>
						</blockquote>
						<p>
							<font face="Courier New">int graphicCalculateAreaBytes(int width, int height)</font></p>
						<blockquote>
							<p>
								Returns the number of bytes required to allocate a graphic buffer of width &#39;width&#39; and height &#39;height&#39;. This is a function of the screen resolution, etc.</p>
						</blockquote>
						<p>
							<font face="Courier New">int graphicClearScreen(color *background)</font></p>
						<blockquote>
							<p>
								Clear the screen to the background color &#39;background&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int graphicDrawPixel(objectKey buffer, color *foreground, drawMode mode, int xCoord, int yCoord)</font></p>
						<blockquote>
							<p>
								Draw a single pixel into the graphic buffer &#39;buffer&#39;, using the color &#39;foreground&#39;, the drawing mode &#39;drawMode&#39; (for example, &#39;draw_normal&#39; or &#39;draw_xor&#39;), the X coordinate &#39;xCoord&#39; and the Y coordinate &#39;yCoord&#39;. If &#39;buffer&#39; is NULL, draw directly onto the screen.</p>
						</blockquote>
						<p>
							<font face="Courier New">int graphicDrawLine(objectKey buffer, color *foreground, drawMode mode, int startX, int startY, int endX, int endY)</font></p>
						<blockquote>
							<p>
								Draw a line into the graphic buffer &#39;buffer&#39;, using the color &#39;foreground&#39;, the drawing mode &#39;drawMode&#39; (for example, &#39;draw_normal&#39; or &#39;draw_xor&#39;), the starting X coordinate &#39;startX&#39;, the starting Y coordinate &#39;startY&#39;, the ending X coordinate &#39;endX&#39; and the ending Y coordinate &#39;endY&#39;. At the time of writing, only horizontal and vertical lines are supported by the linear framebuffer graphic driver. If &#39;buffer&#39; is NULL, draw directly onto the screen.</p>
						</blockquote>
						<p>
							<font face="Courier New">int graphicDrawRect(objectKey buffer, color *foreground, drawMode mode, int xCoord, int yCoord, int width, int height, int thickness, int fill)</font></p>
						<blockquote>
							<p>
								Draw a rectangle into the graphic buffer &#39;buffer&#39;, using the color &#39;foreground&#39;, the drawing mode &#39;drawMode&#39; (for example, &#39;draw_normal&#39; or &#39;draw_xor&#39;), the starting X coordinate &#39;xCoord&#39;, the starting Y coordinate &#39;yCoord&#39;, the width &#39;width&#39;, the height &#39;height&#39;, the line thickness &#39;thickness&#39; and the fill value &#39;fill&#39;. Non-zero fill value means fill the rectangle. If &#39;buffer&#39; is NULL, draw directly onto the screen.</p>
						</blockquote>
						<p>
							<font face="Courier New">int graphicDrawOval(objectKey buffer, color *foreground, drawMode mode, int xCoord, int yCoord, int width, int height, int thickness, int fill)</font></p>
						<blockquote>
							<p>
								Draw an oval (circle, whatever) into the graphic buffer &#39;buffer&#39;, using the color &#39;foreground&#39;, the drawing mode &#39;drawMode&#39; (for example, &#39;draw_normal&#39; or &#39;draw_xor&#39;), the starting X coordinate &#39;xCoord&#39;, the starting Y coordinate &#39;yCoord&#39;, the width &#39;width&#39;, the height &#39;height&#39;, the line thickness &#39;thickness&#39; and the fill value &#39;fill&#39;. Non-zero fill value means fill the oval. If &#39;buffer&#39; is NULL, draw directly onto the screen. Currently not supported by the linear framebuffer graphic driver.</p>
						</blockquote>
						<p>
							<font face="Courier New">int graphicGetImage(objectKey buffer, image *getImage, int xCoord, int yCoord, int width, int height)</font></p>
						<blockquote>
							<p>
								Grab a new image &#39;getImage&#39; from the graphic buffer &#39;buffer&#39;, using the starting X coordinate &#39;xCoord&#39;, the starting Y coordinate &#39;yCoord&#39;, the width &#39;width&#39; and the height &#39;height&#39;. If &#39;buffer&#39; is NULL, grab the image directly from the screen.</p>
						</blockquote>
						<p>
							<font face="Courier New">int graphicDrawImage(objectKey buffer, image *drawImage, drawMode mode, int xCoord, int yCoord, int xOffset, int yOffset, int width, int height)</font></p>
						<blockquote>
							<p>
								Draw the image &#39;drawImage&#39; into the graphic buffer &#39;buffer&#39;, using the drawing mode &#39;mode&#39; (for example, &#39;draw_normal&#39; or &#39;draw_xor&#39;), the starting X coordinate &#39;xCoord&#39; and the starting Y coordinate &#39;yCoord&#39;. The &#39;xOffset&#39; and &#39;yOffset&#39; parameters specify an offset into the image to start the drawing (0, 0 to draw the whole image). Similarly the &#39;width&#39; and &#39;height&#39; parameters allow you to specify a portion of the image (0, 0 to draw the whole image -- minus any X or Y offsets from the previous parameters). So, for example, to draw only the middle pixel of a 3x3 image, you would specify xOffset=1, yOffset=1, width=1, height=1. If &#39;buffer&#39; is NULL, draw directly onto the screen.</p>
						</blockquote>
						<p>
							<font face="Courier New">int graphicDrawText(objectKey buffer, color *foreground, color *background, objectKey font, const char *text, drawMode mode, int xCoord, int yCoord)</font></p>
						<blockquote>
							<p>
								Draw the text string &#39;text&#39; into the graphic buffer &#39;buffer&#39;, using the colors &#39;foreground&#39; and &#39;background&#39;, the font &#39;font&#39;, the drawing mode &#39;drawMode&#39; (for example, &#39;draw_normal&#39; or &#39;draw_xor&#39;), the starting X coordinate &#39;xCoord&#39;, the starting Y coordinate &#39;yCoord&#39;. If &#39;buffer&#39; is NULL, draw directly onto the screen. If &#39;font&#39; is NULL, use the default font.</p>
						</blockquote>
						<p>
							<font face="Courier New">int graphicCopyArea(objectKey buffer, int xCoord1, int yCoord1, int width, int height, int xCoord2, int yCoord2)</font></p>
						<blockquote>
							<p>
								Within the graphic buffer &#39;buffer&#39;, copy the area bounded by (&#39;xCoord1&#39;, &#39;yCoord1&#39;), width &#39;width&#39; and height &#39;height&#39; to the starting X coordinate &#39;xCoord2&#39; and the starting Y coordinate &#39;yCoord2&#39;. If &#39;buffer&#39; is NULL, copy directly to and from the screen.</p>
						</blockquote>
						<p>
							<font face="Courier New">int graphicClearArea(objectKey buffer, color *background, int xCoord, int yCoord, int width, int height)</font></p>
						<blockquote>
							<p>
								Clear the area of the graphic buffer &#39;buffer&#39; using the background color &#39;background&#39;, using the starting X coordinate &#39;xCoord&#39;, the starting Y coordinate &#39;yCoord&#39;, the width &#39;width&#39; and the height &#39;height&#39;. If &#39;buffer&#39; is NULL, clear the area directly on the screen.</p>
						</blockquote>
						<p>
							<font face="Courier New">int graphicRenderBuffer(objectKey buffer, int drawX, int drawY, int clipX, int clipY, int clipWidth, int clipHeight)</font></p>
						<blockquote>
							<p>
								Draw the clip of the buffer &#39;buffer&#39; onto the screen. Draw it on the screen at starting X coordinate &#39;drawX&#39; and starting Y coordinate &#39;drawY&#39;. The buffer clip is bounded by the starting X coordinate &#39;clipX&#39;, the starting Y coordinate &#39;clipY&#39;, the width &#39;clipWidth&#39; and the height &#39;clipHeight&#39;. It is not legal for &#39;buffer&#39; to be NULL in this case.</p>
						</blockquote>
						<p>
							&nbsp;</p>
						<p>
							&nbsp;</p>
						<p>
							<b><a name="window"></a>Window system functions</b></p>
						<p>
							&nbsp;</p>
						<p>
							<font face="Courier New">int windowLogin(const char *userName)</font></p>
						<blockquote>
							<p>
								Log the user into the window environment with &#39;userName&#39;. The return value is the PID of the window shell for this session. The calling program must have supervisor privilege in order to use this function.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowLogout(void)</font></p>
						<blockquote>
							<p>
								Log the current user out of the windowing system. This kills the window shell process returned by windowLogin() call.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNew(int processId, const char *title)</font></p>
						<blockquote>
							<p>
								Create a new window, owned by the process &#39;processId&#39;, and with the title &#39;title&#39;. Returns an object key to reference the window, needed by most other window functions below (such as adding components to the window)</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNewDialog(objectKey parent, const char *title)</font></p>
						<blockquote>
							<p>
								Create a dialog window to associate with the parent window &#39;parent&#39;, using the supplied title. In the current implementation, dialog windows are modal, which is the main characteristic distinguishing them from regular windows.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowDestroy(objectKey window)</font></p>
						<blockquote>
							<p>
								Destroy the window referenced by the object key &#39;window&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowUpdateBuffer(void *buffer, int xCoord, int yCoord, int width, int height)</font></p>
						<blockquote>
							<p>
								Tells the windowing system to redraw the visible portions of the graphic buffer &#39;buffer&#39;, using the given clip coordinates/size.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowSetTitle(objectKey window, const char *title)</font></p>
						<blockquote>
							<p>
								Set the new title of window &#39;window&#39; to be &#39;title&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowGetSize(objectKey window, int *width, int *height)</font></p>
						<blockquote>
							<p>
								Get the size of the window &#39;window&#39;, and put the results in &#39;width&#39; and &#39;height&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowSetSize(objectKey window, int width, int height)</font></p>
						<blockquote>
							<p>
								Resize the window &#39;window&#39; to the width &#39;width&#39; and the height &#39;height&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowGetLocation(objectKey window, int *xCoord, int *yCoord)</font></p>
						<blockquote>
							<p>
								Get the current screen location of the window &#39;window&#39; and put it into the coordinate variables &#39;xCoord&#39; and &#39;yCoord&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowSetLocation(objectKey window, int xCoord, int yCoord)</font></p>
						<blockquote>
							<p>
								Set the screen location of the window &#39;window&#39; using the coordinate variables &#39;xCoord&#39; and &#39;yCoord&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowCenter(objectKey window)</font></p>
						<blockquote>
							<p>
								Center &#39;window&#39; on the screen.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowSnapIcons(objectKey parent)</font></p>
						<blockquote>
							<p>
								If &#39;parent&#39; (either a window or a windowContainer) has icon components inside it, this will snap them to a grid.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowSetHasBorder(objectKey window, int trueFalse)</font></p>
						<blockquote>
							<p>
								Tells the windowing system whether to draw a border around the window &#39;window&#39;. &#39;trueFalse&#39; being non-zero means draw a border. Windows have borders by default.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowSetHasTitleBar(objectKey window, int trueFalse)</font></p>
						<blockquote>
							<p>
								Tells the windowing system whether to draw a title bar on the window &#39;window&#39;. &#39;trueFalse&#39; being non-zero means draw a title bar. Windows have title bars by default.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowSetMovable(objectKey window, int trueFalse)</font></p>
						<blockquote>
							<p>
								Tells the windowing system whether the window &#39;window&#39; should be movable by the user (i.e. clicking and dragging it). &#39;trueFalse&#39; being non-zero means the window is movable. Windows are movable by default.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowSetResizable(objectKey window, int trueFalse)</font></p>
						<blockquote>
							<p>
								Tells the windowing system whether to allow &#39;window&#39; to be resized by the user. &#39;trueFalse&#39; being non-zero means the window is resizable. Windows are resizable by default.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowRemoveMinimizeButton(objectKey window)</font></p>
						<blockquote>
							<p>
								Tells the windowing system not to draw a minimize button on the title bar of the window &#39;window&#39;. Windows have minimize buttons by default, as long as they have a title bar. If there is no title bar, then this function has no effect.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowRemoveCloseButton(objectKey window)</font></p>
						<blockquote>
							<p>
								Tells the windowing system not to draw a close button on the title bar of the window &#39;window&#39;. Windows have close buttons by default, as long as they have a title bar. If there is no title bar, then this function has no effect.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowSetVisible(objectKey window, int visible)</font></p>
						<blockquote>
							<p>
								Tell the windowing system whether to make &#39;window&#39; visible or not. Non-zero &#39;visible&#39; means make the window visible. When windows are created, they are not visible by default so you can add components, do layout, set the size, etc.</p>
						</blockquote>
						<p>
							<font face="Courier New">void windowSetMinimized(objectKey window, int minimized)</font></p>
						<blockquote>
							<p>
								Tell the windowing system whether to make &#39;window&#39; minimized or not. Non-zero &#39;minimized&#39; means make the window non-visible, but accessible via the task bar. Zero &#39;minimized&#39; means restore a minimized window to its normal, visible size.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowAddConsoleTextArea(objectKey window)</font></p>
						<blockquote>
							<p>
								Add a console text area component to &#39;window&#39;. The console text area is where most kernel logging and error messages are sent, particularly at boot time. Note that there is only one instance of the console text area, and thus it can only exist in one window at a time. Destroying the window is one way to free the console area to be used in another window.</p>
						</blockquote>
						<p>
							<font face="Courier New">void windowRedrawArea(int xCoord, int yCoord, int width, int height)</font></p>
						<blockquote>
							<p>
								Tells the windowing system to redraw whatever is supposed to be in the screen area bounded by the supplied coordinates. This might be useful if you were drawing non-window-based things (i.e., things without their own independent graphics buffer) directly onto the screen and you wanted to restore an area to its original contents. For example, the mouse driver uses this method to erase the pointer from its previous position.</p>
						</blockquote>
						<p>
							<font face="Courier New">void windowDrawAll(void)</font></p>
						<blockquote>
							<p>
								Tells the windowing system to (re)draw all the windows.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowGetColor(const char *colorName, color *getColor)</font></p>
						<blockquote>
							<p>
								Get the window system color &#39;colorName&#39; and place its values in the color structure &#39;getColor&#39;. Examples of system color names include &#39;foreground&#39;, &#39;background&#39;, and &#39;desktop&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowSetColor(const char *colorName, color *setColor)</font></p>
						<blockquote>
							<p>
								Set the window system color &#39;colorName&#39; to the values in the color structure &#39;getColor&#39;. Examples of system color names include &#39;foreground&#39;, &#39;background&#39;, and &#39;desktop&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">void windowResetColors(void)</font></p>
						<blockquote>
							<p>
								Tells the windowing system to reset the colors of all the windows and their components, and then re-draw all the windows. Useful for example when the user has changed the color scheme.</p>
						</blockquote>
						<p>
							<font face="Courier New">void windowProcessEvent(objectKey event)</font></p>
						<blockquote>
							<p>
								Creates a window event using the supplied event structure. This function is most often used within the kernel, particularly in the mouse and keyboard functions, to signify clicks or key presses. It can, however, be used by external programs to create &#39;artificial&#39; events. The windowEvent structure specifies the target component and event type.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowComponentEventGet(objectKey key, windowEvent *event)</font></p>
						<blockquote>
							<p>
								Gets a pending window event, if any, applicable to component &#39;key&#39;, and puts the data into the windowEvent structure &#39;event&#39;. If an event was received, the function returns a positive, non-zero value (the actual value reflects the amount of raw data read from the component&#39;s event stream -- not particularly useful to an application). If the return value is zero, no event was pending.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowSetBackgroundColor(objectKey window, color *background)</font></p>
						<blockquote>
							<p>
								Set the background color of &#39;window&#39;. If &#39;color&#39; is NULL, use the default.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowTileBackground(const char *theFile)</font></p>
						<blockquote>
							<p>
								Load the image file specified by the pathname &#39;theFile&#39;, and if successful, tile the image on the background root window.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowCenterBackground(const char *theFile)</font></p>
						<blockquote>
							<p>
								Load the image file specified by the pathname &#39;theFile&#39;, and if successful, center the image on the background root window.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowScreenShot(image *saveImage)</font></p>
						<blockquote>
							<p>
								Get an image representation of the entire screen in the image data structure &#39;saveImage&#39;. Note that it is not necessary to allocate memory for the data pointer of the image structure beforehand, as this is done automatically. You should, however, deallocate the data field of the image structure when you are finished with it.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowSaveScreenShot(const char *filename)</font></p>
						<blockquote>
							<p>
								Save a screenshot of the entire screen to the file specified by the pathname &#39;filename&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowSetTextOutput(objectKey key)</font></p>
						<blockquote>
							<p>
								Set the text output (and input) of the calling process to the object key of some window component, such as a TextArea or TextField component. You&#39;ll need to use this if you want to output text to one of these components or receive input from one.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowLayout(objectKey window)</font></p>
						<blockquote>
							<p>
								Layout, or re-layout, the requested window &#39;window&#39;. This function can be used when components are added to or removed from and already laid-out window.</p>
						</blockquote>
						<p>
							<font face="Courier New">void windowDebugLayout(objectKey window)</font></p>
						<blockquote>
							<p>
								This function draws grid boxes around all the grid cells containing components (or parts thereof).</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowContextAdd(objectKey parent, windowMenuContents *contents)</font></p>
						<blockquote>
							<p>
								This function allows the caller to add context menu items in the &#39;content&#39; structure to the supplied parent object &#39;parent&#39; (can be a window or a component). The function supplies the pointers to the new menu items in the caller&#39;s structure, which can then be manipulated to some extent (enable/disable, destroy, etc) using regular component functions.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowContextSet(objectKey parent, objectKey menu)</font></p>
						<blockquote>
							<p>
								This function allows the caller to set the context menu of the the supplied parent object &#39;parent&#39; (can be a window or a component).</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowSwitchPointer(objectKey parent, const char *pointerName)</font></p>
						<blockquote>
							<p>
								Switch the mouse pointer for the parent window or component object &#39;parent&#39; to the pointer represented by the name &#39;pointerName&#39;. Examples of pointer names are &quot;default&quot; and &quot;busy&quot;.</p>
						</blockquote>
						<p>
							<font face="Courier New">void windowComponentDestroy(objectKey component)</font></p>
						<blockquote>
							<p>
								Deallocate and destroy a window component.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowComponentSetVisible(objectKey component, int visible)</font></p>
						<blockquote>
							<p>
								Set &#39;component&#39; visible or non-visible.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowComponentSetEnabled(objectKey component, int enabled)</font></p>
						<blockquote>
							<p>
								Set &#39;component&#39; enabled or non-enabled; non-enabled components appear greyed-out.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowComponentGetWidth(objectKey component)</font></p>
						<blockquote>
							<p>
								Get the pixel width of the window component &#39;component&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowComponentSetWidth(objectKey component, int width)</font></p>
						<blockquote>
							<p>
								Set the pixel width of the window component &#39;component&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowComponentGetHeight(objectKey component)</font></p>
						<blockquote>
							<p>
								Get the pixel height of the window component &#39;component&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowComponentSetHeight(objectKey component, int height)</font></p>
						<blockquote>
							<p>
								Set the pixel height of the window component &#39;component&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowComponentFocus(objectKey component)</font></p>
						<blockquote>
							<p>
								Give window component &#39;component&#39; the focus of its window.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowComponentUnfocus(objectKey component)</font></p>
						<blockquote>
							<p>
								Removes the focus from window component &#39;component&#39; in its window.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowComponentDraw(objectKey component)</font></p>
						<blockquote>
							<p>
								Calls the window component &#39;component&#39; to redraw itself.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowComponentGetData(objectKey component, void *buffer, int size)</font></p>
						<blockquote>
							<p>
								This is a generic call to get data from the window component &#39;component&#39;, up to &#39;size&#39; bytes, in the buffer &#39;buffer&#39;. The size and type of data that a given component will return is totally dependent upon the type and implementation of the component.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowComponentSetData(objectKey component, void *buffer, int size)</font></p>
						<blockquote>
							<p>
								This is a generic call to set data in the window component &#39;component&#39;, up to &#39;size&#39; bytes, in the buffer &#39;buffer&#39;. The size and type of data that a given component will use or accept is totally dependent upon the type and implementation of the component.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowComponentGetSelected(objectKey component, int *selection)</font></p>
						<blockquote>
							<p>
								This is a call to get the &#39;selected&#39; value of the window component &#39;component&#39;. The type of value returned depends upon the type of component; a list component, for example, will return the 0-based number(s) of its selected item(s). On the other hand, a boolean component such as a checkbox will return 1 if it is currently selected.</p>
						</blockquote>
						<p>
							<font face="Courier New">int windowComponentSetSelected(objectKey component, int selected)</font></p>
						<blockquote>
							<p>
								This is a call to set the &#39;selected&#39; value of the window component &#39;component&#39;. The type of value accepted depends upon the type of component; a list component, for example, will use the 0-based number to select one of its items. On the other hand, a boolean component such as a checkbox will clear itself if &#39;selected&#39; is 0, and set itself otherwise.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNewButton(objectKey parent, const char *label, image *buttonImage, componentParameters *params)</font></p>
						<blockquote>
							<p>
								Get a new button component to be placed inside the parent object &#39;parent&#39;, with the given component parameters, and with the (optional) label &#39;label&#39;, or the (optional) image &#39;buttonImage&#39;. Either &#39;label&#39; or &#39;buttonImage&#39; can be used, but not both.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNewCanvas(objectKey parent, int width, int height, componentParameters *params)</font></p>
						<blockquote>
							<p>
								Get a new canvas component, to be placed inside the parent object &#39;parent&#39;, using the supplied width and height, with the given component parameters. Canvas components are areas which will allow drawing operations, for example to show line drawings or unique graphical elements.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNewCheckbox(objectKey parent, const char *text, componentParameters *params)</font></p>
						<blockquote>
							<p>
								Get a new checkbox component, to be placed inside the parent object &#39;parent&#39;, using the accompanying text &#39;text&#39;, and with the given component parameters.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNewContainer(objectKey parent, const char *name, componentParameters *params)</font></p>
						<blockquote>
							<p>
								Get a new container component, to be placed inside the parent object &#39;parent&#39;, using the name &#39;name&#39;, and with the given component parameters. Containers are useful for layout when a simple grid is not sufficient. Each container has its own internal grid layout (for components it contains) and external grid parameters for placing it inside a window or another container. Containers can be nested arbitrarily. This allows limitless control over a complex window layout.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNewDivider(objectKey parent, dividerType type, componentParameters *params)</font></p>
						<blockquote>
							<p>
								Get a new divider component, to be placed inside the parent object &#39;parent&#39;, using the type &#39;type&#39; (divider_vertical or divider_horizontal), and with the given component parameters. These are just horizontal or vertical lines that can be used to visually separate sections of a window.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNewIcon(objectKey parent, image *iconImage, const char *label, componentParameters *params)</font></p>
						<blockquote>
							<p>
								Get a new icon component to be placed inside the parent object &#39;parent&#39;, using the image data structure &#39;iconImage&#39; and the label &#39;label&#39;, and with the given component parameters &#39;params&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNewImage(objectKey parent, image *baseImage, drawMode mode, componentParameters *params)</font></p>
						<blockquote>
							<p>
								Get a new image component to be placed inside the parent object &#39;parent&#39;, using the image data structure &#39;baseImage&#39;, and with the given component parameters &#39;params&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNewList(objectKey parent, windowListType type, int rows, int columns, int multiple, listItemParameters *items, int numItems, componentParameters *params)</font></p>
						<blockquote>
							<p>
								Get a new window list component to be placed inside the parent object &#39;parent&#39;, using the component parameters &#39;params&#39;. &#39;type&#39; specifies the type of list (see&nbsp;<sys window.h="">for possibilities), &#39;rows&#39; and &#39;columns&#39; specify the size of the list and layout of the list items, &#39;multiple&#39; allows multiple selections if non-zero, and &#39;items&#39; is an array of &#39;numItems&#39; list item parameters.</sys></p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNewListItem(objectKey parent, windowListType type, listItemParameters *item, componentParameters *params)</font></p>
						<blockquote>
							<p>
								Get a new list item component to be placed inside the parent object &#39;parent&#39;, using the list item parameters &#39;item&#39;, and the component parameters &#39;params&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNewMenu(objectKey parent, const char *name, windowMenuContents *contents, componentParameters *params)</font></p>
						<blockquote>
							<p>
								Get a new menu component to be placed inside the parent object &#39;parent&#39;, using the name &#39;name&#39; (which will be the header of the menu in a menu bar, for example), the menu contents structure &#39;contents&#39;, and the component parameters &#39;params&#39;. A menu component is an instance of a container, typically contains menu item components, and is typically added to a menu bar component.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNewMenuBar(objectKey window, componentParameters *params)</font></p>
						<blockquote>
							<p>
								Get a new menu bar component to be placed inside the window &#39;window&#39;, using the component parameters &#39;params&#39;. A menu bar component is an instance of a container, and typically contains menu components.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNewMenuItem(objectKey parent, const char *text, componentParameters *params)</font></p>
						<blockquote>
							<p>
								Get a new menu item component to be placed inside the parent object &#39;parent&#39;, using the string &#39;text&#39; and the component parameters &#39;params&#39;. A menu item component is typically added to menu components, which are in turn added to menu bar components.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNewPasswordField(objectKey parent, int columns, componentParameters *params)</font></p>
						<blockquote>
							<p>
								Get a new password field component to be placed inside the parent object &#39;parent&#39;, using &#39;columns&#39; columns and the component parameters &#39;params&#39;. A password field component is a special case of a text field component, and behaves the same way except that typed characters are shown as asterisks (*).</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNewProgressBar(objectKey parent, componentParameters *params)</font></p>
						<blockquote>
							<p>
								Get a new progress bar component to be placed inside the parent object &#39;parent&#39;, using the component parameters &#39;params&#39;. Use the windowComponentSetData() function to set the percentage of progress.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNewRadioButton(objectKey parent, int rows, int columns, char *items[], int numItems, componentParameters *params)</font></p>
						<blockquote>
							<p>
								Get a new radio button component to be placed inside the parent object &#39;parent&#39;, using the component parameters &#39;params&#39;. &#39;rows&#39; and &#39;columns&#39; specify the size and layout of the items, and &#39;numItems&#39; specifies the number of strings in the array &#39;items&#39;, which specifies the different radio button choices. The windowComponentSetSelected() and windowComponentGetSelected() functions can be used to get and set the selected item (numbered from zero, in the order they were supplied in &#39;items&#39;).</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNewScrollBar(objectKey parent, scrollBarType type, int width, int height, componentParameters *params)</font></p>
						<blockquote>
							<p>
								Get a new scroll bar component to be placed inside the parent object &#39;parent&#39;, with the scroll bar type &#39;type&#39;, and the given component parameters &#39;params&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNewSlider(objectKey parent, scrollBarType type, int width, int height, componentParameters *params)</font></p>
						<blockquote>
							<p>
								Get a new slider component to be placed inside the parent object &#39;parent&#39;, with the scroll bar type &#39;type&#39;, and the given component parameters &#39;params&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNewTextArea(objectKey parent, int columns, int rows, int bufferLines, componentParameters *params)</font></p>
						<blockquote>
							<p>
								Get a new text area component to be placed inside the parent object &#39;parent&#39;, with the given component parameters &#39;params&#39;. The &#39;columns&#39; and &#39;rows&#39; are the visible portion, and &#39;bufferLines&#39; is the number of extra lines of scrollback memory. If &#39;font&#39; is NULL, the default font will be used.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNewTextField(objectKey parent, int columns, componentParameters *params)</font></p>
						<blockquote>
							<p>
								Get a new text field component to be placed inside the parent object &#39;parent&#39;, using the number of columns &#39;columns&#39; and with the given component parameters &#39;params&#39;. Text field components are essentially 1-line &#39;text area&#39; components. If the params &#39;font&#39; is NULL, the default font will be used.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey windowNewTextLabel(objectKey parent, const char *text, componentParameters *params)</font></p>
						<blockquote>
							<p>
								Get a new text labelComponent to be placed inside the parent object &#39;parent&#39;, with the given component parameters &#39;params&#39;, and using the text string &#39;text&#39;. If the params &#39;font&#39; is NULL, the default font will be used.</p>
						</blockquote>
						<p>
							&nbsp;</p>
						<p>
							&nbsp;</p>
						<p>
							<b><a name="user"></a>User functions</b></p>
						<p>
							&nbsp;</p>
						<p>
							<font face="Courier New">int userAuthenticate(const char *name, const char *password)</font></p>
						<blockquote>
							<p>
								Given the user &#39;name&#39;, return 0 if &#39;password&#39; is the correct password.</p>
						</blockquote>
						<p>
							<font face="Courier New">int userLogin(const char *name, const char *password)</font></p>
						<blockquote>
							<p>
								Log the user &#39;name&#39; into the system, using the password &#39;password&#39;. Calling this function requires supervisor privilege level.</p>
						</blockquote>
						<p>
							<font face="Courier New">int userLogout(const char *name)</font></p>
						<blockquote>
							<p>
								Log the user &#39;name&#39; out of the system. This can only be called by a process with supervisor privilege, or one running as the same user being logged out.</p>
						</blockquote>
						<p>
							<font face="Courier New">int userGetNames(char *buffer, unsigned bufferSize)</font></p>
						<blockquote>
							<p>
								Fill the buffer &#39;buffer&#39; with the names of all users, up to &#39;bufferSize&#39; bytes.</p>
						</blockquote>
						<p>
							<font face="Courier New">int userAdd(const char *name, const char *password)</font></p>
						<blockquote>
							<p>
								Add the user &#39;name&#39; with the password &#39;password&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int userDelete(const char *name)</font></p>
						<blockquote>
							<p>
								Delete the user &#39;name&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int userSetPassword(const char *name, const char *oldPass, const char *newPass)</font></p>
						<blockquote>
							<p>
								Set the password of user &#39;name&#39;. If the calling program is not supervisor privilege, the correct old password must be supplied in &#39;oldPass&#39;. The new password is supplied in &#39;newPass&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int userGetPrivilege(const char *name)</font></p>
						<blockquote>
							<p>
								Get the privilege level of the user represented by &#39;name&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int userGetPid(void)</font></p>
						<blockquote>
							<p>
								Get the process ID of the current user&#39;s &#39;login process&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int userSetPid(const char *name, int pid)</font></p>
						<blockquote>
							<p>
								Set the login PID of user &#39;name&#39; to &#39;pid&#39;. This is the process that gets killed when the user indicates that they want to logout. In graphical mode this will typically be the PID of the window shell pid, and in text mode it will be the PID of the login VSH shell.</p>
						</blockquote>
						<p>
							<font face="Courier New">int userFileAdd(const char *passFile, const char *userName, const char *password)</font></p>
						<blockquote>
							<p>
								Add a user to the designated password file, with the given name and password. This can only be done by a privileged user.</p>
						</blockquote>
						<p>
							<font face="Courier New">int userFileDelete(const char *passFile, const char *userName)</font></p>
						<blockquote>
							<p>
								Remove a user from the designated password file. This can only be done by a privileged user</p>
						</blockquote>
						<p>
							<font face="Courier New">int userFileSetPassword(const char *passFile, const char *userName, const char *oldPass, const char *newPass)</font></p>
						<blockquote>
							<p>
								Set the password of user &#39;userName&#39; in the designated password file. If the calling program is not supervisor privilege, the correct old password must be supplied in &#39;oldPass&#39;. The new password is supplied in &#39;newPass&#39;.</p>
						</blockquote>
						<p>
							&nbsp;</p>
						<p>
							&nbsp;</p>
						<p>
							<b><a name="network"></a>Network functions</b></p>
						<p>
							&nbsp;</p>
						<p>
							<font face="Courier New">int networkDeviceGetCount(void)</font></p>
						<blockquote>
							<p>
								Returns the count of network devices</p>
						</blockquote>
						<p>
							<font face="Courier New">int networkDeviceGet(const char *name, networkDevice *dev)</font></p>
						<blockquote>
							<p>
								Returns the user-space portion of the requested (by &#39;name&#39;) network device in &#39;dev&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int networkInitialized(void)</font></p>
						<blockquote>
							<p>
								Returns 1 if networking is currently enabled.</p>
						</blockquote>
						<p>
							<font face="Courier New">int networkInitialize(void)</font></p>
						<blockquote>
							<p>
								Initialize and start networking.</p>
						</blockquote>
						<p>
							<font face="Courier New">int networkShutdown(void)</font></p>
						<blockquote>
							<p>
								Shut down networking.</p>
						</blockquote>
						<p>
							<font face="Courier New">objectKey networkOpen(int mode, networkAddress *address, networkFilter *filter)</font></p>
						<blockquote>
							<p>
								Opens a connection for network communication. The &#39;type&#39; and &#39;mode&#39; arguments describe the kind of connection to make (see possiblilities in the file&nbsp;<sys network.h="">. If applicable, &#39;address&#39; specifies the network address of the remote host to connect to. If applicable, the &#39;localPort&#39; and &#39;remotePort&#39; arguments specify the TCP/UDP ports to use.</sys></p>
						</blockquote>
						<p>
							<font face="Courier New">int networkClose(objectKey connection)</font></p>
						<blockquote>
							<p>
								Close the specified, previously-opened network connection.</p>
						</blockquote>
						<p>
							<font face="Courier New">int networkCount(objectKey connection)</font></p>
						<blockquote>
							<p>
								Given a network connection, return the number of bytes currently pending in the input stream</p>
						</blockquote>
						<p>
							<font face="Courier New">int networkRead(objectKey connection, unsigned char *buffer, unsigned bufferSize)</font></p>
						<blockquote>
							<p>
								Given a network connection, a buffer, and a buffer size, read up to &#39;bufferSize&#39; bytes (or the number of bytes available in the connection&#39;s input stream) and return the number read. The connection must be initiated using the networkConnectionOpen() function.</p>
						</blockquote>
						<p>
							<font face="Courier New">int networkWrite(objectKey connection, unsigned char *buffer, unsigned bufferSize)</font></p>
						<blockquote>
							<p>
								Given a network connection, a buffer, and a buffer size, write up to &#39;bufferSize&#39; bytes from &#39;buffer&#39; to the connection&#39;s output. The connection must be initiated using the networkConnectionOpen() function.</p>
						</blockquote>
						<p>
							<font face="Courier New">int networkPing(objectKey connection, int seqNum, unsigned char *buffer, unsigned bufferSize)</font></p>
						<blockquote>
							<p>
								Send an ICMP &quot;echo request&quot; packet to the host at the network address &#39;destAddress&#39;, with the (optional) sequence number &#39;seqNum&#39;. The &#39;buffer&#39; and &#39;bufferSize&#39; arguments point to the location of data to send in the ping packet. The content of the data is mostly irrelevant, except that it can be checked to ensure the same data is returned by the ping reply from the remote host.</p>
						</blockquote>
						<p>
							<font face="Courier New">int networkGetHostName(char *buffer, int bufferSize)</font></p>
						<blockquote>
							<p>
								Returns up to &#39;bufferSize&#39; bytes of the system&#39;s network hostname in &#39;buffer&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int networkSetHostName(const char *buffer, int bufferSize)</font></p>
						<blockquote>
							<p>
								Sets the system&#39;s network hostname using up to &#39;bufferSize&#39; bytes from &#39;buffer&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int networkGetDomainName(char *buffer, int bufferSize)</font></p>
						<blockquote>
							<p>
								Returns up to &#39;bufferSize&#39; bytes of the system&#39;s network domain name in &#39;buffer&#39;</p>
						</blockquote>
						<p>
							<font face="Courier New">int networkSetDomainName(const char *buffer, int bufferSize)</font></p>
						<blockquote>
							<p>
								Sets the system&#39;s network domain name using up to &#39;bufferSize&#39; bytes from &#39;buffer&#39;</p>
						</blockquote>
						<p>
							&nbsp;</p>
						<p>
							&nbsp;</p>
						<p>
							<b><a name="miscellaneous"></a>Miscellaneous functions</b></p>
						<p>
							&nbsp;</p>
						<p>
							<font face="Courier New">int fontGetDefault(objectKey *pointer)</font></p>
						<blockquote>
							<p>
								Get an object key in &#39;pointer&#39; to refer to the current default font.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fontSetDefault(const char *name)</font></p>
						<blockquote>
							<p>
								Set the default font for the system to the font with the name &#39;name&#39;. The font must previously have been loaded by the system, for example using the fontLoad() function.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fontLoad(const char *filename, const char *fontname, objectKey *pointer, int fixedWidth)</font></p>
						<blockquote>
							<p>
								Load the font from the font file &#39;filename&#39;, give it the font name &#39;fontname&#39; for future reference, and return an object key for the font in &#39;pointer&#39; if successful. The integer &#39;fixedWidth&#39; argument should be non-zero if you want each character of the font to have uniform width (i.e. an &#39;i&#39; character will be padded with empty space so that it takes up the same width as, for example, a &#39;W&#39; character).</p>
						</blockquote>
						<p>
							<font face="Courier New">int fontGetPrintedWidth(objectKey font, const char *string)</font></p>
						<blockquote>
							<p>
								Given the supplied string, return the screen width that the text will consume given the font &#39;font&#39;. Useful for placing text when using a variable-width font, but not very useful otherwise.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fontGetWidth(objectKey font)</font></p>
						<blockquote>
							<p>
								Returns the character width of the supplied font. Only useful when the font is fixed-width.</p>
						</blockquote>
						<p>
							<font face="Courier New">int fontGetHeight(objectKey font)</font></p>
						<blockquote>
							<p>
								Returns the character height of the supplied font.</p>
						</blockquote>
						<p>
							<font face="Courier New">int imageNew(image *blankImage, unsigned width, unsigned height)</font></p>
						<blockquote>
							<p>
								Using the (possibly uninitialized) image data structure &#39;blankImage&#39;, allocate memory for a new image with the specified &#39;width&#39; and &#39;height&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int imageFree(image *freeImage)</font></p>
						<blockquote>
							<p>
								Frees memory allocated for image data (but does not deallocate the image structure itself).</p>
						</blockquote>
						<p>
							<font face="Courier New">int imageLoad(const char *filename, unsigned width, unsigned height, image *loadImage)</font></p>
						<blockquote>
							<p>
								Try to load the image file &#39;filename&#39; (with the specified &#39;width&#39; and &#39;height&#39; if possible -- zeros indicate no preference), and if successful, save the data in the image data structure &#39;loadImage&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int imageSave(const char *filename, int format, image *saveImage)</font></p>
						<blockquote>
							<p>
								Save the image data structure &#39;saveImage&#39; using the image format &#39;format&#39; to the file &#39;fileName&#39;. Image format codes are found in the file<sys image.h=""></sys></p>
						</blockquote>
						<p>
							<font face="Courier New">int imageResize(image *resizeImage, unsigned width, unsigned height)</font></p>
						<blockquote>
							<p>
								Resize the image represented in the image data structure &#39;resizeImage&#39; to the new &#39;width&#39; and &#39;height&#39; values.</p>
						</blockquote>
						<p>
							<font face="Courier New">int imageCopy(image *srcImage, image *destImage)</font></p>
						<blockquote>
							<p>
								Make a copy of the image &#39;srcImage&#39; to &#39;destImage&#39;, including all of its data, alpha channel information (if applicable), etc.</p>
						</blockquote>
						<p>
							<font face="Courier New">int shutdown(int reboot, int nice)</font></p>
						<blockquote>
							<p>
								Shut down the system. If &#39;reboot&#39; is non-zero, the system will reboot. If &#39;nice&#39; is zero, the shutdown will be orderly and will abort if serious errors are detected. If &#39;nice&#39; is non-zero, the system will go down like a kamikaze regardless of errors.</p>
						</blockquote>
						<p>
							<font face="Courier New">void getVersion(char *buff, int buffSize)</font></p>
						<blockquote>
							<p>
								Get the kernel&#39;s version string int the buffer &#39;buff&#39;, up to &#39;buffSize&#39; bytes</p>
						</blockquote>
						<p>
							<font face="Courier New">int systemInfo(struct utsname *uname)</font></p>
						<blockquote>
							<p>
								Gathers some info about the system and puts it into the utsname structure &#39;uname&#39;, just like the one returned by the system call &#39;uname&#39; in Unix.</p>
						</blockquote>
						<p>
							<font face="Courier New">int encryptMD5(const char *in, char *out)</font></p>
						<blockquote>
							<p>
								Given the input string &#39;in&#39;, return the encrypted numerical message digest in the buffer &#39;out&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int lockGet(lock *getLock)</font></p>
						<blockquote>
							<p>
								Get an exclusive lock based on the lock structure &#39;getLock&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int lockRelease(lock *relLock)</font></p>
						<blockquote>
							<p>
								Release a lock on the lock structure &#39;lock&#39; previously obtained with a call to the lockGet() function.</p>
						</blockquote>
						<p>
							<font face="Courier New">int lockVerify(lock *verLock)</font></p>
						<blockquote>
							<p>
								Verify that a lock on the lock structure &#39;verLock&#39; is still valid. This can be useful for retrying a lock attempt if a previous one failed; if the process that was previously holding the lock has failed, this will release the lock.</p>
						</blockquote>
						<p>
							<font face="Courier New">int variableListCreate(variableList *list)</font></p>
						<blockquote>
							<p>
								Set up a new variable list structure.</p>
						</blockquote>
						<p>
							<font face="Courier New">int variableListDestroy(variableList *list)</font></p>
						<blockquote>
							<p>
								Deallocate a variable list structure previously allocated by a call to variableListCreate() or configurationReader()</p>
						</blockquote>
						<p>
							<font face="Courier New">int variableListGet(variableList *list, const char *var, char *buffer, unsigned buffSize)</font></p>
						<blockquote>
							<p>
								Get the value of the variable &#39;var&#39; from the variable list &#39;list&#39; in the buffer &#39;buffer&#39;, up to &#39;buffSize&#39; bytes.</p>
						</blockquote>
						<p>
							<font face="Courier New">int variableListSet(variableList *list, const char *var, const char *value)</font></p>
						<blockquote>
							<p>
								Set the value of the variable &#39;var&#39; to the value &#39;value&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int variableListUnset(variableList *list, const char *var)</font></p>
						<blockquote>
							<p>
								Remove the variable &#39;var&#39; from the variable list &#39;list&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int configRead(const char *fileName, variableList *list)</font></p>
						<blockquote>
							<p>
								Read the contents of the configuration file &#39;fileName&#39;, and return the data in the variable list structure &#39;list&#39;. Configuration files are simple properties files, consisting of lines of the format &quot;variable=value&quot;</p>
						</blockquote>
						<p>
							<font face="Courier New">int configWrite(const char *fileName, variableList *list)</font></p>
						<blockquote>
							<p>
								Write the contents of the variable list &#39;list&#39; to the configuration file &#39;fileName&#39;. Configuration files are simple properties files, consisting of lines of the format &quot;variable=value&quot;. If the configuration file already exists, the configuration writer will attempt to preserve comment lines (beginning with &#39;#&#39;) and formatting whitespace.</p>
						</blockquote>
						<p>
							<font face="Courier New">int configGet(const char *fileName, const char *variable, char *buffer, unsigned buffSize)</font></p>
						<blockquote>
							<p>
								This is a convenience function giving the ability to quickly get a single variable value from a config file. Uses the configRead function, above, to read the config file &#39;fileName&#39;, and attempt to read the variable &#39;variable&#39; into the buffer &#39;buffer&#39; with size &#39;buffSize&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int configSet(const char *fileName, const char *variable, const char *value)</font></p>
						<blockquote>
							<p>
								This is a convenience function giving the ability to quickly set a single variable value in a config file. Uses the configRead and configWrite functions, above, to change the variable &#39;variable&#39; to the value &#39;value&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int configUnset(const char *fileName, const char *variable)</font></p>
						<blockquote>
							<p>
								This is a convenience function giving the ability to quickly unset a single variable value in a config file. Uses the configRead and configWrite functions, above, to delete the variable &#39;variable&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int guidGenerate(guid *g)</font></p>
						<blockquote>
							<p>
								Generates a GUID in the guid structure &#39;g&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">unsigned crc32(void *buff, unsigned len, unsigned *lastCrc)</font></p>
						<blockquote>
							<p>
								Generate a CRC32 from &#39;len&#39; bytes of the buffer &#39;buff&#39;, using an optional previous CRC32 value (otherwise lastCrc should be NULL).</p>
						</blockquote>
						<p>
							<font face="Courier New">int keyboardGetMap(keyMap *map)</font></p>
						<blockquote>
							<p>
								Returns a copy of the current keyboard map in &#39;map&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int keyboardSetMap(const char *name)</font></p>
						<blockquote>
							<p>
								Load the keyboard map from the file &#39;name&#39; and set it as the system&#39;s current mapping. If the filename is NULL, then the default (English US) mapping will be used.</p>
						</blockquote>
						<p>
							<font face="Courier New">int deviceTreeGetCount(void)</font></p>
						<blockquote>
							<p>
								Returns the number of devices in the kernel&#39;s device tree.</p>
						</blockquote>
						<p>
							<font face="Courier New">int deviceTreeGetRoot(device *rootDev)</font></p>
						<blockquote>
							<p>
								Returns the user-space portion of the device tree root device in the structure &#39;rootDev&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int deviceTreeGetChild(device *parentDev, device *childDev)</font></p>
						<blockquote>
							<p>
								Returns the user-space portion of the first child device of &#39;parentDev&#39; in the structure &#39;childDev&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">int deviceTreeGetNext(device *siblingDev)</font></p>
						<blockquote>
							<p>
								Returns the user-space portion of the next sibling device of the supplied device &#39;siblingDev&#39; in the same data structure.</p>
						</blockquote>
						<p>
							<font face="Courier New">int mouseLoadPointer(const char *pointerName, const char *fileName)</font></p>
						<blockquote>
							<p>
								Tells the mouse driver code to load the mouse pointer &#39;pointerName&#39; from the file &#39;fileName&#39;.</p>
						</blockquote>
						<p>
							<font face="Courier New">void *pageGetPhysical(int processId, void *pointer)</font></p>
						<blockquote>
							<p>
								Returns the physical address corresponding pointed to by the virtual address &#39;pointer&#39; for the process &#39;processId&#39;</p>
						</blockquote>
					</td>
				</tr>
			</tbody>
		</table>
	</center>
</div>
                      </div>
      </div>
    
    <div class="clearfix"></div>
    <div id="footer">                 
                                <small><br/>Copyright &copy; 1999-2014 J. Andrew McLaughlin<br/>Visopsys and Visopsys.org are trademarks of J. Andrew McLaughlin.<br/><a href="mailto:andy@visopsys.org">Contact</a> | Design by <a href="http://www.fosforito.net/">Jens L. Wagner</a><br/><br/></small>                  </div>
  <!-- End Wrap2 -->
</div>
<!-- End Wrap -->
</body>
</html>