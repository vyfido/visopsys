//
//  Visopsys
//  Copyright (C) 1998-2020 J. Andrew McLaughlin
//
//  This library is free software; you can redistribute it and/or modify it
//  under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation; either version 2.1 of the License, or (at
//  your option) any later version.
//
//  This library is distributed in the hope that it will be useful, but
//  WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
//  General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public License
//  along with this library; if not, write to the Free Software Foundation,
//  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
//  string
//

// This is the Visopsys version of the standard C++ header file string

#ifndef _STRING_HPP
#define _STRING_HPP

#include <iterator>
#include <memory>

extern "C" {
	#include <sys/types.h>
}

namespace std {

	template <class charT>
	struct char_traits
	{
		typedef charT	char_type;
		typedef int		int_type;
		typedef off_t	off_type;
		typedef off_t	pos_type;
		typedef int		state_type;
	};

	template <class charT,
		class traits = char_traits<charT>,
		class Alloc = allocator<charT> >
	class basic_string
	{
		public:
			typedef traits							traits_type;
			typedef Alloc							allocator_type;
			typedef typename
				traits_type::char_type				value_type;
			typedef typename
				allocator_type::reference			reference;
			typedef typename
				allocator_type::const_reference		const_reference;
			typedef typename
				allocator_type::pointer				pointer;
			typedef typename
				allocator_type::const_pointer		const_pointer;
			typedef typename
				allocator_type::difference_type		difference_type;
			typedef typename
				allocator_type::size_type			size_type;

			typedef std::iterator<random_access_iterator_tag, charT> iterator;
			typedef const std::iterator<random_access_iterator_tag, charT>
				const_iterator;
			typedef std::reverse_iterator<iterator> reverse_iterator;
			typedef const std::reverse_iterator<const_iterator>
				const_reverse_iterator;

			// Const/dest
			explicit basic_string(const allocator_type& a = allocator_type());
			basic_string(const charT *s, const allocator_type& a =
				allocator_type());

			// Member functions
			const charT *c_str() const;
			size_type length() const;
			basic_string& operator=(const basic_string&);
			basic_string& operator=(const charT *);
			basic_string& operator=(charT);
			size_type size() const;

		private:
			const allocator_type _alloc;
			charT *_data;
			size_type _dataLen;
	};

	typedef basic_string<char> string;

	// String operators for iostreams

	template <class charT, class traits> class basic_istream;

	template <class charT, class traits>
	basic_istream<charT, traits>& operator>>(basic_istream<charT, traits>&,
		basic_string<charT>&);

	template <class charT, class traits> class basic_ostream;

	template <class charT, class traits>
	basic_ostream<charT, traits>& operator<<(basic_ostream<charT, traits>&,
		const basic_string<charT>&);
}

#endif

