
---------------
Version 0.62
---------------

  Overview: This is a maintenance release.  Some new features include basic
  USB controller support, a USB mass-storage driver, device hotplugging,
  Qemu support, loading of RLE encoded bitmaps, a 'programs' icon, and
  'minesweeper' and 'snake' games.

- Implemented basic USB support for UHCI controllers.
- Implemented a SCSI driver that can support USB mass storage devices.
- Added basic hot-plugging support for devices.
- Added support in the image functions for loading RLE encoded bitmaps.
- Added a 'programs' icon.
- Added 'minesweeper' and 'snake' games.
- Added an icon for Bauer Vladislav's calendar program.
- Implemented a proper kernelBus top-level infrastructure for use by
the PCI driver, USB driver, etc.
- The display devices and text console drivers are now initialized separately
and before other hardware, so that hardware detection messages can be shown
while detection is going on.
- The 'computer' program now continuously scans for new disks.
- The 'shutdown' command now has a command-line flag for rebooting, and the
'shutdown' and 'reboot' commands now have command-line flags for ejecting
the boot media, if applicable.
- The 'iconwin' and 'filebrowse' programs now change the mouse pointer when
they're busy loading up a file or program.
- The 'iconwin' program now continues silently when programs or icons
specified in the config file are missing.
- The boot menu now has a default selection and timeout period (settable by
the 'bootmenu' program).
- There is now an 'active menu' global window system variable so that the
focussed menu can always be on top, and always go away then it loses focus.
- Fixed: Booting failed on Qemu due to a PS/2 mouse driver hang.
- Fixed: The 'bootmenu' program failed to run from a read-only media.
- Fixed: The boot menu timer was counting down too quickly.
- Fixed: The 'install' program failed if a directory it wanted to create
already existed.
- Fixed: The 'defrag' program was giving "can't defrag filesystem type
'unknown'" messages for things like floppies that hadn't been mounted.
- Fixed: The kernelDiskGetMediaState() function was returning 0 for flash
disks

---------------
Version 0.61
---------------

  Overview: This is a maintenance release.  Some new features include Disk
  Manager support for resizing NTFS filesystems and arbitrary partitions,
  purely unprivileged user-space processes, I/O port permissions and
  protection, IDE block mode I/O, Linux swap detection and clobber,
  improved atomic kernel locks, many C library additions, and a calendar
  program, in addition to assorted bug fixes.

- The Disk Manager can now resize Windows XP (NTFS) partitions, as a result
of porting Linux ntfsprogs NTFS resizing code.
- The Disk Manager will now allow partition-only resizing regardless of
the filesystem type (with appropriate warnings).
- All userspace programs now run in unprivileged CPU mode, regardless of
actual privilege level, and I/O privilege maps have been implemented by
Davide Airaghi.
- Improved IDE/ATA hard disk driver performance by implementing block-mode
I/O.
- Added basic 'stub' NTFS filesystem support (detection and clobber).
- Added basic 'stub' Linux swap filesystem support (detection and clobber).
- The kernel's locking code now implements real atomic locking.
- Added Bauer Vladislav's calendar program.
- All threads now use the same page directory control data as their process
parents for better synchronisation.
- Process stacks now have guard pages at the top which are privileged, so
that user process stack overflows cause protection faults.
- The C library now has a proper suite of malloc() functionality -- taken
from the kernel's implementation -- which is now used by the kernel instead
so it can be used for user space without code duplication.
- Added a kernelMemoryBlockInfo() function to return information about an
allocated memory block.  Useful for the realloc() libc function.
- Added a kernel disk function for rescanning the partitions of a single
disk.
- Added a lock to the 'progress' data structure.
- Implemented 'confirmation' capability in the progress structure and the
libvsh and libwindow progress bar/dialog functions.
- Add a kernel filesystem function for getting statistics about a filesystem
(whether it's mounted or not, or indeed, properly supported or not).
- Added a kernel filesystem function for getting resizing constraints.
- Added a kernel filestystem function for requesting specific detection
of filesystem type (useful for removable media and such).
- The text-mode installer now offers to let you partition first.
- The text mode Disk Manager now show the operations/commands in two
columns.
- Added a window library 'radio dialog' for presenting choices in a radio
button format.
- The Disk Manager's 'move partition' and 'copy disk' functions now uses
standard progress dialogs and show time estimates.
- The kernel logging thread now has a lock on the log, so that the log
doesn't get garbled by different processes logging at the same time.
- The OS loader's screen output is now saved in a file (/system/vloader.log)
so that it can be examined afterwards.
- Removed the source code from the ISO distribution.
- Printf()-style C library functions now support left-justification ('-')
format specifiers.
- Added C library functions lltoa(), lltob(), lltox(), and ulltoa() to
support 'long' format specifiers and arguments.
- Added C library functions mbstowcs(), mbtowc(), and wctomb() for wide-
character support.
- Added C library functions fflush(), ffs(), fgets(), realloc(), strdup(),
strerror(), vfprintf(), vprintf(), vsnprintf(), and vsprintf().
- Added C library functions for 64-bit divisions such as __div64(),
__divdi3(), __moddi3(), etc.
- Enabled the C library functions such as fgetpos(), fread(), fsetpos(),
fflush(), fgets(), ftell(), fprintf(), fseek() and fwrite() (as applicable)
to behave correctly when the FILE* stream is 'stdin', 'stdout', or 'stderr'.
- Added C library header files endian.h, stdint.h, and <sys/cdefs.h>.
- Fixed: After formatting FAT32, Linux and older Windows installers would
show the filesystem as 100% full.
- Fixed: Errors with IDE/ATA hard disks as secondary masters.
- Fixed: Unformatting (clobbering) a partition in the disk manager didn't
seem to convince the kernel to un-detect the previous filesystem until
reboot.
- Fixed: The graphical 'ifconfig' program wasn't updating the device text
after starting/stopping networking.
- Fixed: The wallpaper program was not properly shutting down its window
thread.
- Fixed: The imgboot program failed to exit after calling the login
program.
- Fixed: There was a (harmless) error message when running the 'ldd' program
against an executable program because it always tried to load the file as a
library.

---------------
Version 0.6
---------------

  Overview: This release introduces a host of new functionality, including
  a cleaned up desktop with icons for browsing the computer, file systems,
  and administrative tasks, FAT defragmenting, ELF dynamic linking, a
  built in chain-boot loader and simple MBR formatting, file browsing
  widgets and dialogs, Windows .ico icon file support, a generic file
  viewing program, Italian keyboard support, new icons and a new splash
  screen.

- Added a 'Computer' icon, equivalent to the one in Linux or 'My Computer'
in Windows.  It shows the different disks, auto-mounts them (if applicable)
when clicked, and launches a file browser.
- Added a 'File Browser' icon.
- Added an 'Administration' icon which brings up a window for various
other programs that were previously on the default desktop.
- The 'view' program is now a more generic program for default viewing of
various sorts of files.
- Added defragmenting capability to the FAT filesystem driver.
- Implemented shared libraries and dynamically linked executables.  All
included libraries and programs are now dynamic.
- Implemented a simple, chain-loading MBR boot menu for loading from
different partitions and operating systems.  The 'bootmenu' program lets
the user edit the menu strings and set parameters.  Also accessible from
the Disk Manager.  ** Note that this will NOT load any Linux installation
that uses an initrd.
- Implemented simple MBR code, so that for example the Disk Manager can
be used to rescue a system from a deleted or corrupt GRUB installation.
- Added Windows .ico icon file format support and converted many existing
icons to that format.
- Created file browsing widgets/dialogs.
- There is a new splash screen image and a number of new icons.
- Text areas now use white background and blue text as the default colours.
- Added Davide Airaghi's Italian keyboard mapping.
- Some preliminary networking support has been added, but for the moment it
is disabled by default.  The only network device driver provided is for
the "Lance" (AMD PC-NET) card, which can be simulated under VMWare.  In
the 'Administration' window, there is now a 'Network' icon that proves
access to a simple 'Network Devices' program which, for now, just shows
devices, status, settings, dynamic (via DHCP) IP address, etc.  There is
also a 'ping' command.
- The new exception handler prints out more diagnostic information (exception
type, and more)
- There is now a vsh library function for a text mode progress bar.
- The format program now shows a progress bar in text mode.
- The Disk Manager will refuse outright, or warn/confirm before moving,
formatting, or deleting mounted partitions. 
- The 'disks' command now shows mount points.
- Created an 'iconwin' program that uses config files to create custom
windows with icons, and user-specified actions associated with them.
- Added a /CREDITS.txt file for listing others' contributions.
- There is now a /system/mouse/ directory for mouse pointer images, a
/system/config/ directory for .conf files of all programs and the kernel,
a /system/mount directory for automatic mounting, and a /system/wallpaper
directory for background images.
- Created a 'progress dialog' window library feature that utilizes
the 'progress' structure and shows a progress bar and status messages.
- The exception handler is no longer a standalone task, in order to do FPU
state saves/restores without setting the CR0[TS] bit.
- Handles exceptions generated when a process attempts to do floating point
operations after a task switch.
- The filesystem structure is now contained within the logical disk
structure.
- The user-space 'disk' object now indicates whether a partition is mounted,
and if so, the mount point.
- Exported a portion of the kernelDevice structure as a new 'device'
structure, and created API functions to export the hardware device tree.
- 'Atomized' some of the ASM macros in kernelProcessorX86.h so that they can
be reused in other more complex macros
- Added floorf(), sin(), cos(), and tan() functions to the C lib.
- Added support for %b format specifiers in the _xpndfmt.c functions
by adding another bogus C library routine (itob). 
- File changes: Changed 'kernelMiscFunctions.*' to 'kernelMisc.*', and the
kernelPageManager and kernelMemoryManager have had the 'Manager' bit taken
out of their file/function names.
- Added window library functions to clear an event handler and to get the
window thread PID
- Implemented a 'progress' data structure that can be passed to (for
example) long filesystem operations such as format, check, resize.
- The 'map to free' functionality of the paging code no longer, by default,
allocates the first page in the address space.  This makes it easier to
detect/guide against NULL pointer dereferences.
- Got rid of the 'diskType' and 'mediaType' enums from the various
disk structures, and instead use a set of logical flags to describe disks.
- Removed the deprecated windowPack() and windowSetPacked() API functions.
- Fixed: In the Disk Manager, cancelling a new partition creation at the
label type stage caused 2 changes to show as pending. 
- Fixed: The Disk Manager's partition reordering menu didn't display
changes properly in text mode.  It worked but the changes weren't reflected
in the menu.
- Fixed: The lost+found directory created by the EXT2 formatting code was
not readable when we mounted the filesystem.  Also, the permissions are now
set to the same values as Linux mke2fs.
- Fixed: Using the 'gcc version 3.4.2' and 'ld version 2.15.92.0.2' combo
(Fedora Core 3), generated programs had a new, unexpected number (3) of
ELF program header entries.
- Fixed: Selecting partition/list types in the Disk Manager could crash
the program.
- Fixed: The Program Manager was associating some child threads with the
wrong parents in the process list.

---------------
Version 0.58
---------------

  Overview: This is a maintenance and bugfix release.  Some new features
  include support for EXT2 filesystem formatting, German keyboard layouts,
  GUID (Globally-Unique Identifier) generation, and filesystem clobber.
  Also includes a number of important bugfixes to the Disk Manager program.

- Implemented EXT2 formatting.
- Added Jonas Zaddach's German keyboard layout
- Added GUID-generating capability to the kernel.
- Filesystem drivers that support 'format' functionality now also support
'clobber' functions, so that for example when a format is done, the
filesystem doesn't still get detected as the previous type. 
- The filesystems code now has a proper array of all the different
filesystem drivers, that can be iterated through (for example, when doing
filesystem detection).
- Implemented a "multi choice dialog" that shows buttons with user-
specified text strings and returns the index of the specified choice.
- Fixed: In the Disk Manager, when creating partitions, it wasn't possible
to create logical partitions.  When choosing primary, no primary/logical
attribute was shown.
- Fixed: The EXT filesystem code would fail to mount small filesystems with
only a single block group, where the number of blocks was less than the
maximum blocks per group.
- Fixed: In the graphics mode Disk Manager, after specifying start and end
values for a new partition, pressing 'Cancel' in the tag type dialog didn't
stop the partition from being created.
- Fixed: The Disk Manager's 'move' function check for empty space on either
side of a partition could produce a false error
- Fixed: The Disk Manager was telling the kernel to reread the partitions
too frivolously (especially in between writing the main and extended
partition tables).
- Fixed: The vsh shell's code for marshalling quoted arguments was broken
(e.g. 'touch "foo bar"' created 2 files, foo and bar)
- Fixed: The libc time() function is producing dates off (slow) by 1 year.

---------------
Version 0.57
---------------

  Overview: This is a maintenance and bugfix release.  There are various
  GUI touch-ups, the Disk Manager now updates disk geometry information in
  FAT partitions after disk copy operations, the GUI 'list' component has
  been reimplemented, and a number of kernel improvents have been back-ported
  from the 0.6 development branch.

- When the disk manager does disk-to-disk copies, it now ensures that the
disk geometries stored in any FAT partitions are correct.
- Window lists components now have multi-column mode implemented, are now
capable of showing various combinations of icons, text, or both, and they are
now able to resize successfully, so that more rows can become visible and
multi-column lists get extra columns.
- Added a window 'selection event' that widgets (such as the window list)
can differentiate between a pointless click or scrollbar event and a real
user selection.
- Moved command line parsing code into the kernel's loader so that it will
parse a raw command line.
- The window text area component now has an 'update' function that is called
by the text area subcomponent to let it know when it has updated (so the
window component can update the scroll bar, for example)
- Added API functions to export the hardware device tree.
- Exported a portition of the kernelDevice structure as a new 'device'
structure.
- A bunch of the buttons from various windows have had their 'fixed width'
parameters set.
- Added a 'delete recursive' convenience file function.
- There is now a loaderClassifyFile version that just temporarily reads in
the first few sectors of a file in order to classify it.
- Added a loader file classes function for generic text and binary files,
and boot sectors.
- Added an snprintf C library function.
- The vshFileList (the 'ls' command) function now prints more efficiently.
Previously made millions of print calls.
- Added a kernelFileCount function to the file functions, so that it's easy
to preallocate memory for file entries, etc.
- The windowGuiThread library function now returns the PID of the GUi
thread process so that calling programs can monitor its survival.
- Updated the help file documentation for the program files.
- Fixed: If the user doesn't have administrator privileges, the 'disprops'
program now greys out the list of screen resolutions because the kernel
won't allow it to be changed.  Also, the API functions to get/set the
window manager colours have been made into user-privilege functions.
- Fixed: After "user authentication failed", the login program stopped
responding.
- Fixed: The icon layout in the kernel window shell was allowing the text
of the bottom-most icon to wrap off the screen.
- Fixed: The console text area's scroll bar was not being added to windows
when the rest of the text area was added; thus the scroll bar did not
appear.
- Fixed: The 'wallpaper' program failed to set the wallpaper if the file
name supplied in the file dialog was an absolute path.
- Fixed: The window list item code had an error in which it undercalculated
the length of the text string.

---------------
Version 0.56
---------------

  Overview: This is a maintenance and bugfix release.  Important bugfixes
  include the elimination of boot hangs due to faulty mouse initialization
  and full kernel variable lists, a fix to the detection of secondary
  hard disks, and a fix to faulty mounting of EXT2/3 filesystems.  In
  addition, important multitasker improvements related to process
  initialization have been back-ported from the 0.6 development branch.

- Fixed: The system could fail to boot in graphics mode due to faulty mouse
initialization
- Fixed: The kernel's symbol variable list was becoming full and causing
various boot initializations to fail.  The kernel's variableList code has
been changed so that it automatically manages list memory.
- Fixed: "ID or target sector not found" messages during boot when a second
(slave, for example) hard disk was present.
- Fixed: EXT2 mounting had become generally broken
- Back-ported the 0.6 branch multitasker changes (to do with processImage
structures and argument passing).
- The exception handler process now displays a dialog box when a program
crashes, so that they don't simply disappear (requiring the user to look at
the console output for the reason)
- Added a system to generate the programs' help file text from comments
within the source code, so that it's easier to keep up to date.
- Fixed: When a mount attempt failed, it was possible to end up with a rogue
'/' entry added to the root directory, which could render the whole
directory tree useless until reboot.
- "Genericized" the image loading functions so that they first identify
the format, then call the appropriate routines to interpret it.
- Fixed: When calling kernelWindowDestroy() with a window that had user
containers, there were a number of "Container data is NULL" error messages.
- The kernelError code no longer prints the current process name if
the error occurs inside an interrupt handler; it prints the interrupt
handler number instead.
- Any window components that contain other components now remove them from
the parent container, if applicable. (windowTextArea and windowTitleBar,
for example).
- Fixed: After choosing the destination disk in the install program, there
was an error message from kernelMemoryManager.c:838:The memory pointer is
not mapped.
- The ELF loader code now marks executable code pages as read-only, ELF
headers are now processed more correctly (side effect: eliminating various
messages about unexpected number of ELF headers)
- Changed the FAT, EXT, and ISO filesystem drivers to take more advantage of
packed structures for better efficiency.
- Fixed: The 'format' program was inadvertently ignoring the '-t' filesystem
type option.
- Fixed: If the default background colour was not used, the text area
widget's scroll bar would use that background color rather than the normal
grey.
- Un-exported the filesystem functions in the FAT, ISO, and EXT drivers.
- The 'imgboot' program now shows the OS version in the title.

---------------
Version 0.55
---------------

  Overview: This is a maintenance and bugfix release, with some additional
  capabilities including installation support for all FAT filesystems,
  primitive PCI driver support, and a better organised device driver
  infrastructure.  In addition, GUI window layout and resizing has been
  reimplemented and generally fixed.

- The system can now install to and boot from any kind of FAT filesystem
(FAT12, FAT16, and FAT32/VFAT).
- Fixed window relayout when windows are sized.
- Implemented a better-organised hardware device "tree" and a new, more
generic device driver interface.
- Added a basic PCI bus driver, the initial implementation of which was
provided by Jonas Zaddach.  Only logs a bus device scan, for the moment.
- Implemented a basic a signalling infrastructure, which initially fixes
the problem of CTRL-C crashing the system in text mode.
- Back-ported a number of changes and improvements from the 0.6 branch to
the kernel's disk layer.
- Added a 'debug window layout' function that displays the layout grid
alongside the components; makes it much easier to do program window design
and to debug the kernel's layout code.
- The window manager's event handler thread now dynamically allocates the
memory it uses for storing event hooks.
- Implemented the 'swab' libc function.  Useful for networking.
- The page manager's 'get physical address' function has been modified so
that it works with addresses that aren't page-aligned.
- The interrupt controller functions now have a function that returns the
active interrupt number, and synchronized the kernel's hardware interrupt
number codes with the 'normal' PC interrupt numbers (e.g. 0-F).
- Fixed: Interrupts are now disabled during the pause before reboot, so
that for example the kernel is not still processing I/O interrupts and such.
- Fixed: A number of small issues with the kernelWindowStream code.
- Fixed: In the install program, installing on a freshly-inserted floppy.
could produce the error message "can't install a boot sector for filesystem
type 'unknown'".
- Fixed: When installing from a 'basic' install, there was a spurious error
message resulting from attempting to look for the 'full' install file.

---------------
Version 0.54
---------------

  Overview: This is a maintenance release, with numerous small improvements
  and bugfixes including some general back-porting from the 0.6 development
  branch.  In addition, IDE disk-to-disk operations have been improved so
  that they can happen in parallel, the kernel hardware drivers' interrupt
  handing has been given a new interface, and there is some improved
  efficiency in a performance-critical section of the multitasker.

- Updated the IDE disk controller locking, so that each now have their own
locks; thus I/O can be done in parallel between disks on different
controllers.
- Back-ported large numbers small changes and improvements from the 0.6
development branch.
- Cleaned up the kernelInterrupt code, got rid of all the 'default'
handlers, added an interface for getting/hooking the vectors, and changed
all the built-in drivers to use the interface.  All interrupts are now
initially masked off, and the hardware driver code for each kind of device
has to turn them on after hooking the handler.
- The bootable floppy image for the ISO distribution now contains only the
OS loader and the kernel, because only these are used.  This shrinks the
(zipped) ISO image size.
- The calculation of CPU percentage in the multitasker's scheduler is now
done more efficiently, inside the loop that evaluates the process queue.
- Added text 'save screen' and 'restore screen' functions for use by
programs such as 'fdisk' and 'install' which clear the screen.
- Added convenience functions to the kernelUser code for working with
arbitrary password files, so that for example the installer can set up the
destination password file without doing it all manually.
- Added kernelDiskGet() (single logical or physical), kernelDiskGetAll(),
and kernelDiskGetAllPhysical() functions.
- The kernel's page manager now includes a method for setting flags on
pages (such as writable, present, cache disable, etc), and a function that
allows memory to be mapped at a particular address.
- Created a user-space 'process image' structure that can describe details
such as memory page mapping, virtual addresses, entry points, arguments,
and so on.
- kernelError.h now contains the include for <sys/errors.h>
- Fixed: Copying a big file such as an .iso image could fail because the
copy code tried to allocate enough memory for the whole file.  Now it
allocates as much as possible and does multiple reads/writes
- Fixed: Typing and using the mouse at the same time was causing funny
things to go on.  The interrupt handlers for the two devices needed to be
better synchronized.
- Fixed: When dragging an icon, one pixel-width of the icon title wasn't
being erased properly.
- Fixed: The FAT12 boot sector source code shipped with version 0.53 didn't
work for floppy disks
- Fixed: In the libc's _xpndfmt.c function (used by printf, sprintf, etc),
the numDigits() function was returning the wrong value for large signed
numbers, resulting in double-width numbers for format strings such as %08x.
- Fixed: The graphics mode text driver was not recognizing 'longest lines'
if the cursor had been moved around using the textSetRow function.
- Fixed: Doing a second kernel make without changing anything resulted in
an empty kernelSymbols.txt file, since the previous make stripped the
kernel.

---------------
Version 0.53
---------------

  Overview: This is a maintenance release, with numerous small improvements
  and bugfixes.  A number of unnecessary files and programs have been
  removed.

- Re-engineered the kernel's file handling code so that it uses less stack
memory, has less code redundancy, and exports different functions to the
rest of the kernel than it does to user space.
- The format operation causes the kernel to re-scan the partitions, so that
the new filesystem type is recorded in the disk structure
- The Program Manager now shows overall memory usage totals.
- The 'mem' command now prints totals in kilobytes, and uses a structure
from the kernel (a new API function) describing the memory blocks, rather
than the kernel printing out the information directly.  Subsequently,
deprecated the kernelMemoryPrintUsage() function.
- The shutdown program now attempts to eject the CD-ROM a second time if
required, since it seems that some drives will fail on the first attempt
but succeed on the second.
- The FAT boot sectors no longer rely on the disk geometry they get from
the DOS BPB block.  They get it from the BIOS instead.
- Removed the 'move' command (there's already a 'mv' command)
- Removed a large number of unimplemented libc function files.
- Moved the libc global data into crt0.c
- The boot sectors/OS loader that capture key presses ("press any key...")
now use the BIOS' int 16h function instead of trapping the hardware interrupt.
- Deprecated the kernelDisk{Read|Write}Absolute functions.  Instead,
the normal kernelDisk{Read|Write} functions are now able to figure out
whether the supplied disk name is physical or logical.
- The libvsh functions no longer call perror().  They still set errno, and
then leave perror() up to the caller.
- Added the -W and -Wshadow options to Makefiles.
- Added -ffreestanding to Makefiles, to ensure that the compiler isn't
including built-in functions we're not expecting.
- Got rid of the "unsigned int" terminology everywhere and replaced it with
simple "unsigned"
- Fixed: The Disk Manager was showing 1MB total size for all disks
- Fixed: In the Disk Manager's 'create partition' function, if you supplied
bad start/end values, the logical/primary choice would be disabled when the
dialog box came back.
- Fixed: When copying a file, if the destination was a directory (rather than
a fully-specified file name), there was a kernelFileDelete error message
- Fixed: when the vshCursorMenu scrolled the screen, it looked funny.
- Fixed: 'ls' an unknown file, hang!

---------------
Version 0.52
---------------

  Overview: This is a maintenance and bugfix release, with some additional
  features, such as improved disk-to-disk copies and partition table
  reordering in the Disk Manager, and additional C library functions.

- Implemented threaded, double-buffered disk IO for the 'copy disk'
functionality of the disk manager.
- The disk manager's slice list now indicates the disk name and file system
type (if available), and it is now possible to change the partition table
ordering - i.e., changing drive names/letters.
- The vsh history is bigger, and there is now a 'history' command.
- Added open(), lseek(), read(), write(), close(), fprintf, fread(),
fwrite(), and stat() C library functions.
- The kernelError messages now indicate the name of the process that caused
the error.
- The 'disks' command now reports the filesystem type, if known, and not
just the partition label.
- Exported the kernelMultitaskerProcessIsAlive() function.
- The 'vsh' and 'ls' commands have been updated to improve their stack/data
memory usages.
- The kernelConfigurationWriter has been reworked so that if the file
already exists, it writes the new one to a temp location first, then moves
the new one over top.
- Fixed up the Makefiles a bit and we now make sure that we're building
with the correct CPU specified.
- Fixed up 'errno' implementation in the C library.
- Fixed: The disk manager 'copy disk' failure was leaving the dialog box
on the screen.
- Fixed: The format command could hang when doing a large FAT32 filesystem.
- Fixed: The 'rmdir' functionality was broken, because the '.' and '..'
entries were not being removed correctly.
- Fixed: In the disk manager's 'create partition' function, specifying a
megabyte size value overflowed at 4096m.
- Fixed: The windowList component has been changed to stop implementing its
own idea of 'container', and use the standard container component.
- Fixed: Deleting the old menu list items in kernelWindowShellUpdateList()
was causing crashes; it was disabled in the 0.5 release, and it was a pretty
serious memory leak.
- Fixed: The 'umount' command failed when a following / was after the mount
point name.

---------------
Version 0.51
---------------

  Overview: This is a maintenance and bugfix release, with some additional
  features, such as the Disk Manager's ability to fix small partition table
  consistency errors.

- Enhanced the bootstrap code so that it is possible to boot on some
trickier hardware platforms, such as Toshiba laptops.
- The disk manager now offers to fix errors turned up by the partition
table check.
- The disk thread now respawns when it is killed [ thanks Thomas Kreitner ].
- The 'install' program now show a progress meter in text mode while
copying files.
- When the shutdown program is attempting to eject the disk, it now shows
a banner dialog since sometimes it takes a couple of seconds.
- In the text area code, when the screen is cleared, the existing screen
contents are no longer rolled back into the buffer -- they are discarded.
- Deprecated the windowPack() and windowSetPacked() API functions.
- While attempting builds with gcc version 3.4.2, fixed a number of bugs
and details that the newer compiler found.
- Fixed: The program manager wasn't really putting threads under their
correct process parents; it merely put them in order as received from the
kernel.
- Fixed: The getopt() library function was being used incorrectly by a
number of the user applications.
- Fixed: It was possible to kill the exception handler thread, which caused
an immediate triple fault [ thanks Thomas Kreitner ].
- Fixed: Broken CD-ROM floppy disk emulations no longer trick the loader
into detecting nonexistent floppies.
- Fixed: On some hardware, the kernel's hardware detection could be tricked
into detecting nonexistent fixed disks with NULL geometry.
- Fixed: The 'megabytes' value being printed for hard disks by the loader
was severely wrong.

---------------
Version 0.5
---------------

  Overview: This release adds logical partition capabilities to both the
  kernel and the Disk Manager (which has been substantially rewritten),
  window minimizing, a GUI taskbar for managing windows, new icons and
  cleaner desktop layout, a 'Program Manager' application, and a temporary
  file interface -- as well as lots of bug fixes and smaller tweaks.

- Added support for hard disk logical partitions
- Added a 'taskbar' menu to the top of the root window.
- Added 'minimize' functionality to windows.
- Made a 'program manager' program that allows a user to manage running
processes, etc.
- Enlarged the disk manager window and its canvas, and added a more action
buttons. 
- Added a 'show info' action to the disk manager.
- Implemented the ability to 'hide' partitions in the disk manager
- The disk manager now includes an option for writing a fresh partition
table to a disk.
- The disk manager now allows the disk to be specified as a command line
argument.
- The disk manager now has a better GUI interface for creating a new
partition.
- Implemented a temporary file interface
- The install program now shows which install disk is selected when in
graphics mode.
- Made a new 'shell' icon for the command window, added icons for the program
manager and configuration editor, and removed the 'logout' and 'shutdown'
icons from the desktop.
- Programs that can run in both graphics and text modes (such as the disk
manager and the installer) now have a standard -T argument that causes them
to run in text mode.
- Added a libvsh 'cursor menu'.  Converted imgboot, fdisk, etc. to use it.
- Added the ability to have comment lines in the install files
- Created a libvsh function for parsing a command line into command and args,
suitable for passing to the loaderLoadAndExec function.
- Added a user-space 'process' struct, and converted the 'ps' command to
use it.
- The date/time printing library functions have been cleaned up and fixed
so that they don't print superfluous spaces
- Restored the 'ownership' attributes of input streams, and restored the
CTRL-C functionality.
- Moved the 'dist' directory out of the 'utils' area and into the top
level directory
- Added strchr and strrchr C library functions
- Added a kernelStreamDestroy() function to complement kernelStreamNew()
- Attempting to mount a CD will now close the tray before the attempt, if
it's open.
- Removed the icons= line from windowmanager.conf.  The window shell will
now figure out the list of icons dynamically based on which ones are
actually specified in the file
- The 'format' now has 2 additional modes: a graphical mode, and a non-
interactive 'silent' mode.
- (Re)-implemented the ability to get a screen shot from a key press.
The 'instant screenshot' is triggered by [PRINT SCRN] key, and multiple
shots can be taken this way without overwriting one another.
- The vsh prompt is no longer the whole directory path; just the current
directory name.
- The window checkbox widget now ignores the user-specified foreground
color for the 'x', since we always use white for the background behind it,
and if the foreground was white, no 'x' would be visible.
- The graphical shutdown program now offers an 'eject CD-ROM' checkbox
when booted from CD-ROM, since otherwise the door stays locked and getting
the CD out during the BIOS POST can be tricky.
- CTRL-ALT-DEL now does a proper shutdown, so that the disks are synced
before rebooting.
- Removed the exception handler's 'core dump' code, since it wasn't all
that useful without tracing/debugging facilities.
- Clicking outside of all of a window's components now removes the focus
from any focussed component.
- Fixed: The 'cdrom' program's help page claimed that it will attempt to
guess the name of the device is not specified, but that hadn't been
implemented.  It always picked the first cdrom.
- Fixed: The ATAPI driver was not reliably ejecting CD-ROMs.
- Fixed: The window manager screenshot code was crashy
- Fixed: The 'display settings' program's 'show clock on the desktop'
thing was very crashy.
- Fixed: The kernelFileStreamClose() function now destroys the stream.
Previously it didn't do so and was a memory leak.
- Fixed: The installation program now calculates the required space more
accurately, and verifies adequate disk space *before* starting the
installation.
- Fixed: Extra (second) floppy disks were showing up where they didn't exist
- Fixed: The disk manager's formatting functionality was crashy  
- Fixed: In graphics mode, the disk manager's action buttons were not being
laid out properly.
- Fixed: In graphics mode, the disk name argument of the disk manager didn't
properly select the disk in the disk list.
- Fixed: The kernel logger was inserting random characters into the log at
512-byte boundaries.
- Fixed: The return value of the library memcmp function.  If comparison
failed on the first byte, it was returning success (0).
- Fixed: Partition Magic was complaining about the disk manager's CHS values
being incorrect.  In particular it wasn't liking our 'maxed out' head and
sector values when a partition started or ended at a cylinder > 1024.
- Fixed: When creating new partitions in the disk manager, Partition Magic
was showing multiple ones as active.
- Fixed: Dragging an icon was executing the program, as if the icon were
simply clicked
- Fixed: Seeking/writing to the end of a file stream was broken.
- Fixed: Typing during a graphics mode screen scroll left stray cursors on
the screen and could cause crashes
- Fixed: When snapping the icons in the root window, the window layout was
being redone too many times (once for *every* icon that moved).
- Fixed: The menu bar component was ignoring any user-specified font.
- Fixed: Window title bar menus are no longer drawn if there are no items
in them.
- Fixed: The window canvas component was generating a kernelMemoryRelease
message about a pointer not being mapped.
- Fixed: Causing the console text area to scroll while it wasn't visible
caused a triple-fault.
- Fixed: The status messages in the graphical install program were wrapping
off the window.
- Fixed: If a CD-ROM was a master with a slave, that CD-ROM was not detected.
If the slave was also a CD-ROM, neither was detected.
- Fixed: The system was unable to boot from the second CD-ROM device.
- Fixed: Running the 'install' program with a disk name argument was not
working

---------------
Version 0.42
---------------

  Overview: This is primarily a bugfix release, with some added features
  including the ability to format partitions from the Disk Manager, plus
  vertical scroll bars on text areas and visual reimplementation of
  "greyed out" window components.

- Enabled filesystem formatting functionality in the disk manager.
- Implemented vertical scroll bars and extended buffers on window text
area components
- Improved the 'greying out' functionality in the window manager; it
didn't look great with the default colors and looked positively silly with
some other color schemes.
- Reimplemented the 'hidden' functionality of window text areas so that
the buffer contains the real content, and the visible area contains the
asterisks.  The 'get data' function returns the data from the buffer.
- The window manager now makes more use of the busy mouse pointer
- Restored window list locking, now that interrupt handlers don't need
access.
- Created a new logo for the splash image
- In the disk manager, there is now a confirmation dialog before moving
partitions
- Added a 'get disk by file' function.
- The 'disk' structures now contain a set of flags to indicate which
filesystem functions are available from the appropriate driver, if
applicable.
- Moved the window event processing out of the execution path of interrupt
handlers and into the window manager thread
- Added 'new' and 'destroy' functions for kernelTextAreas
- Moved icons and fonts into subdirectories under /system
- Added a way to specify whether a loadable font should be fixed-width
- Removed instances of 'bzero' calls in the kernel.  We have a much better
kernelMemClear() function.
- Added a 'strncasecmp' C library function
- Simplified the management of 'kernelFilesystem' structures in the
filesystem code.
- The graphics code (main, framebuffer driver, and window manager and
friends) now uses ints instead of unsigneds for widths and heights
- Moved the font argument from some window components into the
componentParameters structure
- Fixed: Setting the widest item in a GUI menu to not enabled caused a bit
of the menu border to get greyed out as well.
- Fixed: State changes in the disk manager's disk and partition lists caused
by key events were not being handled properly.
- Fixed: In the User Manager, when adding a new user, if the user already
existed the program would still prompt for a password.
- Fixed: In 16-bit video mode, window titles were not displaying proper
transparency
- Fixed: The size/drawing of the items in list components was slightly off.
- Fixed: If fonts or icons are missing, there's a panic
- Fixed: The text mode console driver was not scrolling properly when
printing long lines.  The next line would overwrite the wrapped part of the
previous one.

---------------
Version 0.41
---------------

  Overview: This is primarily a bugfix release, with some added features
  including the ability to move partitions, a configuration editor, and a
  keymap editor.  There are also a number of small tweaks to graphical
  components and GUI user settings.

- The disk manager can now move partitions in contiguous space (i.e. it can
'slide' them from side to side)
- Created a 'configuration editor' for editing configuration files
- Created a 'keymap editor' for choosing keyboard layout.
- In the Disk Manager, clicking on a colored slice in the canvas area now
selects the partition
- Added a 'color chooser' window library dialog box
- The window shell thread now loads programs automatically based on things
specified in the window manager config file.
- Added a pretty xterm font (modified from the xterm program under Linux).
- Made it possible to set the default foreground, background, and desktop
colors for all graphics operations in the kernel.conf file.
- Added a 'show clock on desktop' checkbox to the display properties app with
an accompanying clock app.
- Implemented right and middle mouse click events.
- The radio button GUI widget will now accept focus and allow keyboard
control
- In the Disk Manager, when a new partition is created, it is now selected
afterward.
- When copying disks in the disk manager, added a better prompt dialog
to ask which disk to copy to, with a clickable list instead of a typing
prompt, and it doesn't prompt about which disk to copy to if there's only
one other choice
- Made the 'scroll bar' GUI widget available from user space
- Calling 'set selected' with GUI list widgets now scrolls the list if
necessary so that the selected one is visible.
- The window manager no longer re-saves its config file at shutdown
- Added a 'cancel' button to the 'copy disk' dialog of the disk manager
- Mouse dragging events now filter down to the user space via the event stream.
- Added a 'kill by name' function to the multitasker.
- Added a 'focus' routine to the menu widget, so that when the menu will
disappear itself if it loses the focus
- Made a more friendly error message for the help command when there is not
a help file for the topic.
- Fixed: In 15-bit graphics modes, the colors were all wrong.
- Fixed: The window list component was not responding very accurately to
movements of the vertical slider, the slider was picking up both up-and-down
mouse clicks, and dragging wasn't all that perfect either.
- Fixed: It was possible to resize a window down to nothing (or less than
nothing!!).
- Fixed: The mouse pointer was leaving tracers when dragging or resizing
windows, or dragging icons
- Fixed: Compilation failed on SuSE 9, with gcc 3.3.3 and (more importantly)
whatever GNU ld comes with it.
- Fixed: It wasn't possible to hide a GUI component if they had the focus.
- Fixed: The format command stopped accepting a lone disk name argument
- Fixed: The framebuffer graphic driver was not drawing any part of outlined
rectangles if part of the rectangle was off the screen.
- Fixed: Resizing list components was not resizing the subcomponent list
items
- Fixed: Multiple buttons inside a container component were not picking up
window events.
- Fixed: The arial bold 10 font's equals ('=') sign was a plus ('+')
- Fixed: Pressing CTRL-ALT-DELETE in graphics mode produced a panic with
'can't yield() in interrupt handler'

---------------
Version 0.4
---------------

  Overview: This release features a number of graphical interface
  improvements, including several new GUI widgets and "newbie" usability
  tweaks.  The 'install' and 'disk manager' programs have been properly
  GUI-enabled, and this release also adds user authentication with MD5
  password encryption.

- Implemented the following GUI widgets:
checkbox, radio button, menu bar (plus menu, and menu item), progress bar,
canvas, scroll bar, list (plus list item), and password field
- Implemented 'container' components which can be nested arbitrarily,
and have their layout done individually.  Added a top level 'container'
component to the window structure and removed the simple list of components.
- When running from a CD-ROM or other read-only filesystem, there is now
an general warning that the user can't modify settings or change anything
generally.
- The OS loader now gives the kernel a list of supported graphics
resolutions/depths that are supported, and there is user preference for
choosing the mode, which the OS loader now reads from a file.
- Improved the hardware structure in the OS loader so that it makes use of
NASM's STRUCT directive
- Added text-mode password prompting code to the vsh library
- Exported locking and variable list functionality to user space.
- The 'configuration reader/writer' code is more sophisticated, so that it
preserves comment lines (if replacing an existing config file)
- Updated the install image generation scripts, and fixed the naming of the
generated images
- Created a new background image that isn't so 'busy'.  Removed the old ones.
- The 'start program' loaded by the kernel is now specified dynamically in
a file, and added an 'image boot' program to be loaded first when booting
from an ISO or floppy  image distribution that will prompt the user whether
they want to install, or simply run from that image.
- In the vsh, you no longer need to put a space between the last command
argument and any ampersand
- Implemented Bresenham's lines and circles algorithms in the framebuffer
graphic driver.
- Both the native installer and the UNIX installation scripts now use
file lists and include options to do a 'basic' versus 'full' install.
- The FAT filesystem driver no longer calculates the filesystem free space
asynchronously.  Previously, this meant that an application could not know
how long to wait before it could begin writing to a freshly-mounted
filesystem.
- Graphicized both the 'install' and 'disk manager' programs
- After copying a larger disk to a smaller one in the disk manager, we now
go through the entries in the partition table and adjust them so that none
have illegal values.  That means, for example, deleting or truncating
partitions that don't fit on the smaller disk.
- Added a 'cursoring' effect to the text mode disk manager, since it
makes the flow better (not required to type partition numbers, etc.), and
which means that a partition or empty space is always selected, which fits
better with the graphics mode use model.
- The disk manager program now saves disk-specific backup MBRs in the
/system/boot directory
- The window manager thread now checks that windows' processes are still
alive, so that it doesn't require a mouse click to dispose of the window.
Also, if the window manager thread dies it is now restarted
- 'Visopsys blue' is now the default foreground color for most GUI
components (rather than black).
- Removed the start window and replaced it with a simple splash image
- Changed remaining 'csh' scripts to 'sh' and removed the unused stuff
from the /utils/src-mgmt directory
- Rearranges the source code directory structure and build system a little
bit, so that there is a top-level 'build' directory which contains all the
installable stuff in the correct places.  This allowed the installer to be
a lot simpler and facilitated the implementation of installation file lists.
- Implemented a 'getopt' library function and converted the contents of
the 'programs' directory to use it.
- Added a 'window shell' thread which is the new user login process
in graphics mode, and which handles events on components in the root window.
- Added 'delete user' functionality to both the kernelUser code and the
'user manager' program.
- Added a 'passwd' command that shows as a 'user manager' in the GUI, that
can be used to change passwords and create/delete accounts.
- Separated the source files for the different libraries into
subdirectories, and broke out the libvsh and libwindow code into separate
source files to reduce executable sizes.
- Added a 'file selection' dialog box into the window lib.
- Font printing by default draws the background color under the character.
Transparent images are still an option.
- Added a 'flags' field to the kernelWindow structure, since there were a
few booleans and it's a waste of space to make them all ints.
- Vsh file completion now works like bash when there's only one
'real' item in a directory -- complete it with just a [tab]
- Made it possible to click between multiple text areas in window
- Added user authentication to the login program
- Improved handling of width specifiers for 'printf' number parameters.
- Added an MD5 encryption implementation
- A commands is no longer added to the vsh history if it's the same as the
previous one
- The keyboard code now reads the lights status at startup so that it
doesn't reset them improperly.  Also, numlock works.
- Implemented enable/disable functionality for GUI components.
- Implemented a 'set visible' function for components
- Implemented 'set disabled' functionality for window menu items
- Added 'resizable X' and 'resizable Y' fields in the component parameter
structure, and only resize components appropriately
- Simplified the process of adding components to windows, so that you only
have to call the 'new' function, with the component parameters, and it will
be added to the window automatically.
- Removed the 'size' parameters from the 'button' component constructor
- Implemented the 'get data' and 'set data' methods of text label
components, so that the label contents can be dynamic.
- Added a window component flag that will prevent a [tab] from unfocusing
certain components.
- Removed the coordinate and size parameters from the "new window"
function of the window manager.  The window size is determined automatically
unless the "set size" function is called.
- Window layout happens automatically.  The programmer no longer has to do
this explicitly.
- Added resizing capability to the windows in the window manager.
- Window buttons are now focusable and can handle various keyboard events
- Implemented proper 'focussing' of window components
- Added a function for getting the contents of a text field or text area
component in the window manager
- The window close button no longer uses the little 'X' image file,
but rather draws its own 'X' using the new bresenham line drawing abilities.
- Changed the 'shutdown' program so that in graphics mode it prompts for
a reboot or shutdown
- Added a better 'install' icon.
- Added a GPL banner to the image boot program
- Disabled the left-right cursor keys in the vsh, as they tend to make
people think they can do line editing (which they can't, yet).
- Fixed: If the screen dimensions are too small to accommodate a window, it
doesn't appear at all.
- Fixed: Pressing CTRL-ALT-DELETE in graphics mode produces a panic with
'can't yield() in interrupt handler'
- Fixed: The 'screenshot' program was crashing when attempting to write to
read-only filesystems.
- Fixed: If the floppy was removed while the boot loader was loading the
kernel, it was going into long retry loops
- Fixed: File input streams were horribly broken in the ISO9660 filesystem
driver.  Before the fix they would only read the first sector.
- Fixed: argv[0] was not being set by the loader code.  It was only being
set explicitly by the vsh when programs are executed, which it shouldn't do
at all.
- Fixed: The arrangement of icons in the root window so that they wrap
into the next column when they hit the bottom of the screen
- Fixed: There was trouble (triple-fault) drawing outline (non-filled)
rectangles in the framebuffer graphic driver, if they were partially off
the edges of the screen
- Fixed: The ELF loader was not allocting enough memory for the uninitialized
data that executables might require.
- Fixed: The free spaces calculation in the disk manager was incorrect,
particularly when there was only one partition that didn't start at zero
- Fixed: "component cannot focus" error messages when clicking on icon
components
- Fixed: When booting from the hard disk , the opening of the kernel log
file often failed with a "not enough space" message.
- Fixed: In text mode, the login process was not properly setting supervisor
privilege for the 'admin' user
- Fixed: When windows were dragged, the focus was lost from the focused
component.
- Fixed: Text fields were coming up with their cursors on by default.
- Fixed: The kernel.log file was not being updated/written correctly.
- Fixed: The fileWrite routine was not behaving as expected when writing a
single-block file.  The file size was zero, even though the file was written
and closed properly
- Fixed: When writing a file using the file stream functions, there was
a newline inserted at the beginning of a file.

---------------
Version 0.33
---------------

  Overview: This is primarily a bugfix release, with bootable CD-ROM support
added as a new feature.

- Added bootable ISO9660 (el-torito) CD-ROM support.
- The 'no boot' boot sector code no longer reboots the system, but instead
properly calls the next boot option
- Fixed: Spurious error messages when booting from a read-only file system.
- Fixed the kernel heap allocation code, which was losing and corrupting
blocks of memory, and leaving small, odd-sized gaps of unused memory.
- Polished up the scripts for creating floppy & CD-ROM images
- Fixed: No longer attempt to recalibrate ATAPI disks.
- If a CD-ROM read fails because there is no disk, the driver no longer
leaves the number of sectors at zero, since that will stop all subsequent
read attempts
- The CD-ROM driver code can determine more elegantly whether there is a data
CD in the drive and if not, print a friendly error message.

---------------
Version 0.32
---------------

  Overview: This is primarily a bugfix release, with CD-ROM and ISO9660
  filesystem support added as new (alpha) features.

- Added (multi-session capable) CD-ROM driver code
- Fixed: The 'date' command day of the week was wrong.
- Created a set of help text files for all of the commands, in a
  /programs/helpfiles subdirectory.  The 'help' command is now an executable
  which can provide command-specific help.
- The 'vsh' shell now has a '-c' option so that it can be used to execute
  commands, non-interactively.
- Added a 'system' Visopsys C library function
- Added a 'driver data' field in the physical disk object, so that the
  different drivers can store device-specific data there.  Implemented the
  floppy driver's 'detect' and 'register device' routines to remove some of
  the floppy-specific stuff from the hardware detection code.
- The 'mount' and 'umount' commands will now accept relative pathnames
- Added an ISO9660 filesystem driver
- Eliminated spurious floppy timeout error messages when booting from hard
  disks.
- Fixed: Unknown floppy drive types were causing hardware detection (and
  therefore the whole startup) to fail.

---------------
Version 0.31
---------------

  Overview: This is primarily a bugfix release, with EXT2 filesystem support
  added as a new (alpha) feature.

- Implemented a preliminary, alpha, read-only EXT2 filesystem driver
- The libraries and (non-kernel) include files have been relicensed under
  the GNU LGPL to permit use by proprietary programs
- The IDE/ATA/ATAPI driver was not responding to disks on the secondary
  controller.
- Fixed: The 'cat' program wasn't printing tabs properly the way the 'more'
  program does.
- Fixed: kernelMalloc allocations were not necessarily being done on any
  boundaries.  It is now done on sizeof(unsigned) (dword) boundaries.
- Added a *very* basic 'find' program which only traverses whole directory
  trees.  Initially to aid in development of new filesystems

---------------
Version 0.3
---------------

  Overview: This release is very much an "under the hood" release.  The
  user interaction is similar to that of 0.2, but a great deal of work
  has gone into improving the structure, performance, and stability of the
  underlying code -- particularly the disk subsystem.  However, some eye
  candy has been added, and the GUI is more functional and consistent.

- A thread of a process can now kill the parent process.
- Created a multitasker 'detach' function for daemons or other programs
  to use to detach themselves from any programs that might be blocking on
  them.
- Fixed: Windows wasn't entirely happy with our FAT short filename aliases.
  Complained about the format of the short name of
  "/system/boot/bootsect.fatnoboot"
- Changed the naming of the kernel window components (removed the'component'
  bit from the names)
- Fixed: File completions were completing things they shouldn't; i.e. when
  you "cd system; ls b[tab]" it completed "background" but there's a "boot"
  directory as well.
- The window manager thread is now the login process for a user when in
  graphics mode, rather than a text shell running in a console window.
- Reduced the stack sizes of processes.  They shouldn't need nearly as much
  (260K) as they were being given.
- Removed all the 'binary distribution' stuff (the Java installer,
  shell scripts, readmes, etc).  We will only do binary distributions as
  floppy or ISO images from now on.
- The console window is no longer shown by default.  Added a program and
  icon ('console') to display it and handle the window events, etc.  Added
  external API functions to put a console widget into a user program.
- Changed the error reporting interface for the disk drivers.  Removed
  the 'last error message' and 'last error code' functions -- these were
  leftovers from the days of ASM drivers that couldn't use the normal error
  reporting mechanisms.
- Fixed: The mouse was not being redrawn when windows close themselves.
- Implemented 'levels' for GUI components within a window, in the same
  manner as windows have levels.  This way if components overlap, we can
  only send windowEvents to the uppermost one.
- Sped up the scrolling of graphics text areas.  Now only scroll as much of
  the width of the area as the longest line of contents.
- Fixed up the framebuffer graphic driver a little bit more so that it draws
  most efficiently for the bit depth it's using.
- Implemented kernel versions of malloc() and free() so that we're not always
  wasting whole pages of memory for small things.
- Added shutdown and reboot buttons to the login screen in graphics mode.
- Implemented text labels on kernelWindowButton components, with selectable
  font.
- Fixed: Window layout problems.  Attempting to add reboot and shutdown
  buttons to the login screen, I discovered that setting the components
  gridWidth parameters to 2 causes a crash.  In addition, when I incorrectly
  left the gridWidth at 1 and attempted to add the 2 buttons below (using 2
  grid places) they were erroneously placed on the line above, and the
  other widgets got squashed together.
- Added an event notification callback mechanism for user programs that
  use the GUI.  When a user performs a GUI action, such as clicking a
  button, the user application can now read that event from the component.
- As a supplement to this, implmented user-mode library code for monitoring
  window component event queues.  It includes a "GUI run" function that
  signals the application is ready to begin monitoring its widgets for
  events, after all its setup is done.  The rest of the flow can be driven
  by callbacks from events.  All of the included programs have been converted
  to use these features.
- Added a logout procedure for the window manager (rather than having to
  log out by hand from the console window)
- Implemented a better "kernel panic" routine that displays something
  useful in either text or graphics mode and shuts things down quickly.
- Interrupt handlers and their actions are no longer allowed to yield(),
  wait(), block(), etc.
- Fixed: Moving the mouse in text mode is disrupting keyboard input
- The fdisk program will save a backup copy of the MBR before writing changes,
  and provides an option to restore it.
- The graphic/text console drivers, as well as the FAT filesystem driver,
  have abstracted driver registration procedures like the hardware drivers do.
- The API calls in kernelApi.c are now 'hashed' according to their function
  number, for faster API throughput.
- Added a routine to the generic disk code for reading the disks'
  partition tables (instead of in the hardware enumeration code).  It is
  be re-callable anytime so that programs like fdisk can create/delete
  partitions and have the change be reflected immediately in the list of
  logical disks.
- Cleaned up the management of the kernel's built-in drivers.  The drivers
  now have an 'init' that registers the driver structure with the kernel, so
  that the kernelDriverManagement code doesn't have to have all the functions
  hard-coded in there.
- Disk caches are invalidated when removable media is unmounted.
- The boot sector and the OS loader can now boot from a cylinder > 1024.
- Large disk geometries are now correctly evaluated by the hardware detection
  code and by the fdisk program.
- Created a 'non-bootable' FAT boot sector, that the formatting code uses
  to make non-system FAT volumes
- When files are copied, the sizes are now being set correctly.
- The new floppy driver C code no longer freezes up the computer if you remove
  the media unexpectedly.
- Hardware enumeration and fdisk no longer fail when there is no partition
  table on the hard disk
- FAT filesystem root directories now have '.' entries (and '..' entries
  when they're not '/')
- Removing the last file in a directory (for example, in the root of a
  filesystem) no longer produces an error message.
- Fixed up the filesystem driver stuff, so that there is only one instance
  of each driver of each known type
- In the FAT filesystem driver, file names that start with '.' were listed,
  but could not be created or accessed.  This is fixed.
- Implmented FAT filesystem driver formatting functionality
- Improved the fdisk program so that it can do most common operations
- When there are no files in a directory, 'ls' no longer prints an error
  message.
- When doing disk reads, we now do read-ahead caching
- The kernel is now able to handle operation from a read-only or write-
  protected media without spewing errors and getting panicky.
- kernelLocks are now exclusive even to the same process.  i.e. If a
  process owns a lock, calling kernelLockGet() a second time fails.
- Added a UK English keyboard mapping
- The disk code should launches a new 'synchronizer' thread if the existing
  one dies.
- The exception handler tries to do a stack dump when an exception occurs.
- The filesystem code is now correctly updating FAT short filename aliases
  when files are moved.
- Updated the loader code that searches for a valid video mode.  It now
  searches for *any* LFB video mode first, and reports an error to that effect
  if it finds none.  That is a different scenario than not finding a 'desired'
  video mode.
- Added LFB graphic driver support for bit depths of 32, 16, and 15 BPP.
- Remove the FAT sector caching from the FAT filesystem driver.
- Changed the filesystem synchronizer so that it is now a *disk* daemon
  that simply turns removable drives' motors off.
- Implemented proper asynchronous disk caching.
- Kernel symbols to aid debugging, in the /system/kernelSymbols.txt file,
  which is read at startup and used for stack traces and whatnot.
- Converted all built-in drivers from ASM to C, with inline ASM in a
  processor-specific header file.  This makes it easier for them to use the C
  data structures, etc., for better integration with the rest of the kernel.
  THERE IS NO LONGER ANY NASM ASSEMBLY CODE IN THE KERNEL.  Woo!
- Changed 'root' user to 'admin' user -- something less geeky/UNIXy.
- The kernelDisk structure is broken up into physical objects and logical
  disks (volumes, i.e. hard disk partitions, but every physical disk has at
  least one logical disk).  The disk cache, 'idle since' value, physical
  characteristics, etc., are in the physical disk.  Things like starting
  sector, number of sectors, etc., are in the logical disk structure.  The
  physical disk structure contains the logical ones.
- Added some memory manager macros so that each memory block request
  doesn't require an alignment specification (only where desired)
- Fixed: rm system/windowmanager.conf ; sync   ...Errors in the filesystem.
- The window icon code is better able to deal with long icon names.
  Previously it printed the whole name on one long line.
- When a user logs out of the window manager, all windows belonging to
  that user are destroyed
- Fixed: Mouse driver initialization was sometimes causing the boot sequence
  to 'hang' a little bit -- wiggling the mouse or pressing keys was required
  to continue
- The kernel log utility was losing some log messages that come early in the
  boot process, before the root filesystem is mounted.
- Change start.o (.c) to crt0.o for more UNIX C compatibility.
- Fixed: When running a command window, all the shell processes suddenly
  start hogging CPU.  Was a case of 2 'ready' processes constantly yield()ing
  to one another.  Changed the scheduler so that a process will get a low
  weight if it has yielded that timeslice before (a little different from the
  previous algorithm)

---------------
Version 0.2
---------------

  Overview: This release was a huge leap ahead from version 0.1 (and
  it took a long time, too).  This release added a basic GUI, whereas
  version 0.1 was text-mode only.  Really, the list of changes below is
  very incomplete -- Especially in listing new features.

- Fixed: When rebooting from other operating systems such as Windows or
  Linux, Visopsys would triple-fault.  Clearing the page cache seems to do
  the trick.  Also changed the way page caching is done.  Turned off write-
  through which improved the performance of the graphics as well.
- Updated the shell 'help' text.
- Fixed: Can't move/copy a file over top of another by the same name in a
  different location unless you specify the destination filename explicitly
  (i.e. if you just specify the directory, it fails)
- When using the 'more' program, pressing [enter] to list a new line no
  longer leaves the "--More--(xx%)--" message on the screen
- When a process has finished but is waiting for its child threads to
  terminate (i.e. mount), any process that is blocking on that process
  now stops waiting.
- Fixed: Crashes when running the 'install' program, and other types of long
  disk writes.  When this happened under the old exception handler, the
  handler used to go into an endless loop complaining about an exception in
  the idle process.  This was the fault of the 'timed event scheduler'.
  Got rid of that.
- Fixed: The floppy motor was staying on all the time on many machines
- Fixed: The FAT filesystem code was not properly filling all long filenames.
  They were cut off after some number of characters.
- Fixed: When in the multitasker the killing of a process is delayed because
  of child threads, the process never seems to be killed when the children
  have all terminated.  For example, when you mount a large FAT filesystem
  (C:), the thread that reads the FAT keeps the "mount" process alive,
  waiting, forever.
- Fixed: When pushing some of the "non-printable" keys such as 'num lock'
  and then doing command history, the shell was backing up by one character
  before completing the filename.
- Added support for non-fixed-width fonts in the kernelFont functions.
- Added support for loading fonts.  The system font looks lame on titles
  and whatnot, particularly on the login screen.
- The login is now a little more meaningful in graphics mode.  Previously,
  a console window would open with a login: prompt, but the user could
  happily start opening other command windows and such, and ignore the login
  (unless they wanted root permissions).
- Added loading support for 24-bit bitmaps.  We already saved in that format.
- Fixed: Umounting a filesystem was not properly dereferencing either the
  filesystem or the disk.  Couldn't mount->unmount->mount the same disk.
- Changed the shell to do filename completions on the same line as the
  current line, rather than starting on the next line.
- Implemented multiple text output streams, with the text input stream
  changing to the active window, so that we can have multiple text windows
  open at the same time
- Implmented the FAT filesystem driver checking functionality [It's very
  primitive, but it does detect and fix some errors]
- Moved the exception handler code into the multitasker.  It really needs to
  interact with the multitasker quite a bit.
- The new exception handler thread was hanging the terminal (breakable with
  CTRL-C) when the exception message happened at the bottom of the text area
  and caused the screen to scroll
- The kernel's exception handler is now a spawned thread with its own stack,
  etc., so that it doesn't run as part of whatever process caused the
  exception in the first place.  This helps to prevent the exception handler
  itself from crashing if things have gone seriously wrong with a process.
- Adding permission checking to the kernel functions that are be exported to
  the rest of the world.
- Fixed: The boot progress indicator was progressing beyond the end of the
  indicator
- The 'getchar' routine now does the work of polling/yielding, rather than
  the programs that call it.
- Added a basic 'fdisk' program that can do things like swap the active
  partition on hard disks
- Fixed: The hard disk enumeration routine was crashing when there was more
  than one physical disk
- Added the ability to copy directory trees in the filesystem functions, one
  level up from the filesystem driver.  Could be a library routine instead
  someday.
- Fixed: The 'cp' command was crashing when copying files involving the hard
  disk
- Implmented the 'write' function in the IDE disk driver.  Previously it was
  left out since the filesystem driver is still imperfect.
- Fixed: Mounting hard disk partitions on my 30GB hard disk was not working.
  LBA versus CHS issue
- Fixed: The mouse driver initialization sometimes hung, waiting for a
  response from the mouse to a command
- Added ELF executable capability and moved the programs to ELF format
- Fixed: Incomplete filenames were still having an / appended to them by
  the shell.
- The PS2 mouse driver and the keyboard driver now share a lock on the
  device, since they both deal with the same registers, etc.
- Fixed: Sometimes an error in another program could cause a fault in the
  idle process (?!?), then the exception handler routines would get into an
  endless loop
- Fixed: When a process created a new process, the unmapping of the new
  process' memory from the parent process space would sometimes cause a page
  fault.
- Fixed: The 'log file updater' thread was been crashing frequently, most
  often when another process crashed
- The scheduler no longer spawns a new idle thread while the multitasker is
  in the process of shutting down.
- Fixed: The 'date' command was producing wrong results.  The year, dotm,
  hour, minute, etc., were correct, but the month and dotw were wrong. 
- Fixed: When shortening a filename, one extra character from the old
  filename got left on the end of the new name.  This was because of strncpy
  changes.
- Fixed: There was a little sequencing error in the kernelMemoryManager's
  share memory routine -- it was deallocating the memory from the sharer
  process before allocating it to the sharee.
- Simplified the default driver management.  It was ridiculously
  overcomplicated.
- Fixed: The FAT code that lowercases short filenames wasn't lowercasing the
  file extensions
- Fixed: Most of the device driver initialization routines were being called
  twice; once in kernelDriverManagement.c and once in the abstraction layer
  initialization

---------------
Version 0.1
---------------

- Initial public release.
